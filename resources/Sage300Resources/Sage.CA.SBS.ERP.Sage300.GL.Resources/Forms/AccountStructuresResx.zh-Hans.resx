<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Entity" xml:space="preserve">
    <value>总帐科目结构</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="UseCompanyDefault" xml:space="preserve">
    <value>用作公司默认结构</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="ChooseSegments" xml:space="preserve">
    <value>可用的节段</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="SegmentsUsed" xml:space="preserve">
    <value>用于这一科目的节段</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="CmdInclude" xml:space="preserve">
    <value>包括</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="CmdExclude" xml:space="preserve">
    <value>排除</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="NOSCODE" xml:space="preserve">
    <value>编辑科目结构之前必须定义节段代码。</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="SelectedAccountSegments" xml:space="preserve">
    <value>选择的科目节段</value>
  </data>
  <data name="StructureCode" xml:space="preserve">
    <value>结构代码</value>
  </data>
  <data name="StructureCodeDescription" xml:space="preserve">
    <value>结构描述</value>
  </data>
  <data name="SegmentNumber" xml:space="preserve">
    <value>节段编号</value>
    <comment>Added for Display  of AccoutnStructure model. This is being used for all segment number in model.</comment>
  </data>
  <data name="SegmentStartingPosition" xml:space="preserve">
    <value>节段起始位置</value>
    <comment>Added for Display  of AccoutnStructure model. This is being used for all SegmentStartingPosition in model.</comment>
  </data>
  <data name="AccountStructure" xml:space="preserve">
    <value>科目结构</value>
  </data>
  <data name="GL0023" xml:space="preserve">
    <value>结构代码</value>
    <comment>Used in Export Import</comment>
  </data>
  <data name="Segment10Length" xml:space="preserve">
    <value>节段10长度</value>
  </data>
  <data name="Segment10StartingPosition" xml:space="preserve">
    <value>节段10起始位置</value>
  </data>
  <data name="Segment1Length" xml:space="preserve">
    <value>节段1长度</value>
  </data>
  <data name="Segment2Length" xml:space="preserve">
    <value>节段2长度</value>
  </data>
  <data name="Segment2StartingPosition" xml:space="preserve">
    <value>节段2起始位置</value>
  </data>
  <data name="Segment3Length" xml:space="preserve">
    <value>节段3长度</value>
  </data>
  <data name="Segment3StartingPosition" xml:space="preserve">
    <value>节段3起始位置</value>
  </data>
  <data name="Segment4Length" xml:space="preserve">
    <value>节段4长度</value>
  </data>
  <data name="Segment4StartingPosition" xml:space="preserve">
    <value>节段4起始位置</value>
  </data>
  <data name="Segment5Length" xml:space="preserve">
    <value>节段5长度</value>
  </data>
  <data name="Segment5StartingPosition" xml:space="preserve">
    <value>节段5起始位置</value>
  </data>
  <data name="Segment6Length" xml:space="preserve">
    <value>节段6长度</value>
  </data>
  <data name="Segment6StartingPosition" xml:space="preserve">
    <value>节段6起始位置</value>
  </data>
  <data name="Segment7Length" xml:space="preserve">
    <value>节段7长度</value>
  </data>
  <data name="Segment7StartingPosition" xml:space="preserve">
    <value>节段7起始位置</value>
  </data>
  <data name="Segment8Length" xml:space="preserve">
    <value>节段8长度</value>
  </data>
  <data name="Segment8StartingPosition" xml:space="preserve">
    <value>节段8起始位置</value>
  </data>
  <data name="Segment9Length" xml:space="preserve">
    <value>节段9长度</value>
  </data>
  <data name="Segment9StartingPosition" xml:space="preserve">
    <value>节段9起始位置</value>
  </data>
  <data name="SegmentNumber10" xml:space="preserve">
    <value>节段编号10</value>
  </data>
  <data name="SegmentNumber2" xml:space="preserve">
    <value>节段编号2</value>
  </data>
  <data name="SegmentNumber3" xml:space="preserve">
    <value>节段编号3</value>
  </data>
  <data name="SegmentNumber4" xml:space="preserve">
    <value>节段编号4</value>
  </data>
  <data name="SegmentNumber5" xml:space="preserve">
    <value>节段编号5</value>
  </data>
  <data name="SegmentNumber6" xml:space="preserve">
    <value>节段编号6</value>
  </data>
  <data name="SegmentNumber7" xml:space="preserve">
    <value>节段编号7</value>
  </data>
  <data name="SegmentNumber8" xml:space="preserve">
    <value>节段编号8</value>
  </data>
  <data name="SegmentNumber9" xml:space="preserve">
    <value>节段编号9</value>
  </data>
  <data name="Segment1StartingPosition" xml:space="preserve">
    <value>节段1起始位置</value>
  </data>
  <data name="SegmentNumber1" xml:space="preserve">
    <value>节段编号1</value>
  </data>
</root>