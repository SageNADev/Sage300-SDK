<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CdlgFilter" xml:space="preserve">
    <value>OFX 对帐单 (*.aso;*.ofx;*.dbo;*.afx;*.qfx)|*.aso;*.ofx|文本文件 (*.txt)|*.txt|所有文件 (*.*)|*.*</value>
    <comment>Message</comment>
  </data>
  <data name="EmptyFiscCal" xml:space="preserve">
    <value>财务日历是空的。</value>
    <comment>Message</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>导入OFX对帐单</value>
    <comment>Screen Title</comment>
  </data>
  <data name="ErrintBKStmt" xml:space="preserve">
    <value>发生一个问题，至少一个科目{1}的有在途编号{2}于{3}的{0}币种对帐单未能调节到银行{4}。</value>
    <comment>Message</comment>
  </data>
  <data name="ErrintCCStmt" xml:space="preserve">
    <value>发生一个问题，至少一个科目{1}的于{2}于{2}的{0}币种对帐单未能调节到银行{3}。</value>
    <comment>Message</comment>
  </data>
  <data name="FromBankCode" xml:space="preserve">
    <value>从银行代码</value>
    <comment>Field</comment>
  </data>
  <data name="ImportedTrx" xml:space="preserve">
    <value>{0}个对帐单和{1}个新建交易已导入，保存并准备好匹配。</value>
    <comment>Message</comment>
  </data>
  <data name="InvRecYP" xml:space="preserve">
    <value>为{0}的调节被跳过。要调节这一银行，您必须指定一个{1}-{2}或更迟的调节年度/期间。</value>
    <comment>Message</comment>
  </data>
  <data name="MatchBKCurrMatchingStmtInfo" xml:space="preserve">
    <value>为银行{4}成功导入币种{0}，科目{1}（分行编号{2}）于{3}的对帐单。</value>
  </data>
  <data name="MatchBKCurrNotMatchingStmtInfo" xml:space="preserve">
    <value>警告：导入币种{0}，科目{1}（分行编号{2}）于{3}的对帐单，但对帐单不在银行{4}的币种范围内。复查并核实导入的交易。</value>
  </data>
  <data name="MatchBKStmtInfo" xml:space="preserve">
    <value>科目{1}，分行编号{2}于{3}的{0}币种对帐单符合银行{4}。</value>
    <comment>Message</comment>
  </data>
  <data name="MatchCCCurrMatchingStmtInfo" xml:space="preserve">
    <value>为银行{3}成功导入币种{0}，科目{1}于{2}的对帐单。</value>
  </data>
  <data name="MatchCCCurrNotMatchingStmtInfo" xml:space="preserve">
    <value>警告：导入币种{0}，科目{1}于{2}的对帐单，但对帐单不在银行{3}的币种范围内。复查并核实导入的交易。</value>
  </data>
  <data name="MatchCCStmtInfo" xml:space="preserve">
    <value>科目{1}于{2}的{0}币种对帐单符合银行{3}。</value>
    <comment>Message</comment>
  </data>
  <data name="MatchTrxAmt" xml:space="preserve">
    <value>{0}个交易相符，仅基于金额。请核实调节。</value>
    <comment>Message</comment>
  </data>
  <data name="NoActUnlckYP" xml:space="preserve">
    <value>试图探测该公司首个活动且未锁定的财务期间时发生一个问题。</value>
    <comment>Message</comment>
  </data>
  <data name="OFXFile" xml:space="preserve">
    <value>下载的银行对帐单文件</value>
    <comment>Field</comment>
  </data>
  <data name="OFXNoRateComment" xml:space="preserve">
    <value>没有{0}汇率从{1}到{2}于{3}。</value>
    <comment>Message</comment>
  </data>
  <data name="PContents" xml:space="preserve">
    <value>选择一个有效的OFX文件。</value>
    <comment>Message</comment>
  </data>
  <data name="PVersion" xml:space="preserve">
    <value>所选文件被使用一个不支持的OFX版本创建。</value>
    <comment>Message</comment>
  </data>
  <data name="StmtCurrency" xml:space="preserve">
    <value>{0}币种对帐单不在银行{1}的币种范围内。是否仍然继续导入？</value>
    <comment>Message</comment>
  </data>
  <data name="StmtProcessInfo" xml:space="preserve">
    <value>处理了{0}个对帐单，调节了{1}个。</value>
    <comment>Message</comment>
  </data>
  <data name="ToBankCode" xml:space="preserve">
    <value>到银行代码</value>
    <comment>Field</comment>
  </data>
  <data name="TrxProcessInfo" xml:space="preserve">
    <value>在调节的对帐单中处理了{0}个交易，清算了{1}个。（未清算的已处理交易在其首次处理时作为分录添加。）</value>
    <comment>Message</comment>
  </data>
  <data name="UnmatchBKStmtInfo" xml:space="preserve">
    <value>科目{1}，在途编号{2}于{3}的{0}币种对帐单不符合任何指定范围内的银行记录。</value>
    <comment>Message</comment>
  </data>
  <data name="UnmatchCCStmtInfo" xml:space="preserve">
    <value>科目{1}于{2}的{0}币种对帐单不符合任何指定范围内的银行记录。</value>
    <comment>Message</comment>
  </data>
</root>