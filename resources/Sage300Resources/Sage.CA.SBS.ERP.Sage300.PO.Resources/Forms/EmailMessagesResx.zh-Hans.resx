<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Entity" xml:space="preserve">
    <value>采购订单电邮讯息</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="MessageType" xml:space="preserve">
    <value>讯息类型</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="EmailSubject" xml:space="preserve">
    <value>电邮主题</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="Add" xml:space="preserve">
    <value>是否添加这一讯息？（讯息类型：{0}，讯息标识：{1})</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>是否要保存对这一讯息的更改？（讯息类型：{0}，讯息标识：{1})</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="DeleteMessage" xml:space="preserve">
    <value>是否确要删除这一讯息？（讯息类型：{0}，讯息标识：{1})</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="MessageDoesNotExist" xml:space="preserve">
    <value>无法找到指定的讯息。（讯息类型：{0}，讯息标识：{1})</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="MsgIDIsBlank" xml:space="preserve">
    <value>讯息标识不能空置。</value>
    <comment>Auto-Generated</comment>
  </data>
  <data name="DateInactive" xml:space="preserve">
    <value>闲置日期</value>
  </data>
  <data name="EmailBody" xml:space="preserve">
    <value>电邮讯息</value>
  </data>
  <data name="EmailMessage" xml:space="preserve">
    <value>电邮讯息</value>
  </data>
  <data name="MessageID" xml:space="preserve">
    <value>讯息标识</value>
  </data>
  <data name="DeleteDefaultMessage" xml:space="preserve">
    <value>您不能删除&lt;Default&gt;讯息。</value>
    <comment>Default Delete Error Message</comment>
  </data>
  <data name="EmailMessageHelp" xml:space="preserve">
    <value>您可以在电邮主题或讯息中使用变量来插入公司或供应商信息。</value>
    <comment>Instruction</comment>
  </data>
  <data name="MessageDesc" xml:space="preserve">
    <value>讯息描述</value>
    <comment>Field</comment>
  </data>
  <data name="DateLastMaintained" xml:space="preserve">
    <value>上一维护日期</value>
  </data>
  <data name="PurchaseOrder" xml:space="preserve">
    <value>订购单</value>
  </data>
  <data name="InactiveDefaultMessage" xml:space="preserve">
    <value>您不能将&lt;Default&gt;讯息设为闲置。</value>
    <comment>Default Inactive Error Message</comment>
  </data>
  <data name="PO0540" xml:space="preserve">
    <value>电邮讯息</value>
    <comment>Used in Export/Import</comment>
  </data>
</root>