<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddingToExistingBatch" xml:space="preserve">
    <value>Ajoutant à un lot existant</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="ChooseSegmentsFromList" xml:space="preserve">
    <value>Segments disponibles</value>
    <comment>Detail Screen - Field</comment>
  </data>
  <data name="ConsolidateByPostAccFisc" xml:space="preserve">
    <value>Consolider par séquence de report, compte et période</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="ConsolidateByPostAccFiscSource" xml:space="preserve">
    <value>Consolider par séquence de report, compte, période et source</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="Consolidation" xml:space="preserve">
    <value>Consolidation</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="CreatingandPostingNewBatch" xml:space="preserve">
    <value>Créant et reportant un nouveau lot</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="CreatingNewBatch" xml:space="preserve">
    <value>Créant un nouveau lot</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="Discount" xml:space="preserve">
    <value>Remise</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="DoNotConsolidate" xml:space="preserve">
    <value>Ne pas consolider</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="DuringPosting" xml:space="preserve">
    <value>Pendant le report</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>Intégration GL de CC</value>
    <comment>Screen Title</comment>
  </data>
  <data name="Example" xml:space="preserve">
    <value>Exemple</value>
    <comment>Field</comment>
  </data>
  <data name="GLDetailComment" xml:space="preserve">
    <value>Commentaire détail GL</value>
    <comment>Transactions - Table Column</comment>
  </data>
  <data name="GLDetailDescription" xml:space="preserve">
    <value>Description détail GL</value>
    <comment>Transactions - Table Column</comment>
  </data>
  <data name="GLDetailReference" xml:space="preserve">
    <value>Référence détail GL</value>
    <comment>Transactions - Table Column</comment>
  </data>
  <data name="GLEntryDescription" xml:space="preserve">
    <value>Description saisie GL</value>
    <comment>Transactions - Table Column</comment>
  </data>
  <data name="GLIntegrationDetail" xml:space="preserve">
    <value>Détail intégration GL</value>
    <comment>Screen Title</comment>
  </data>
  <data name="GLSourceCodes" xml:space="preserve">
    <value>Codes sources GL</value>
    <comment>Integration - Table Header</comment>
  </data>
  <data name="GLTransactionField" xml:space="preserve">
    <value>Champ transaction GL</value>
    <comment>List</comment>
  </data>
  <data name="InterestCharge" xml:space="preserve">
    <value>Frais d'intérêt</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="OnRequestGLBatch" xml:space="preserve">
    <value>Sur demande en utilisant l'écran Créer lot GL</value>
    <comment>Integration - List Option</comment>
  </data>
  <data name="PaymentReceived" xml:space="preserve">
    <value>Paiement reçu</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="PaymentReversal" xml:space="preserve">
    <value>Extourne de paiement reçu</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="PostingSequenceNo1" xml:space="preserve">
    <value>Numéro séquence de report</value>
    <comment>Integration - Table Column</comment>
  </data>
  <data name="RefundReversal" xml:space="preserve">
    <value>Extourne de remboursement</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="SegmentCurrentlyUsed" xml:space="preserve">
    <value>Utiliser segments</value>
    <comment>Detail Screen - Field</comment>
  </data>
  <data name="SegmentSeparator" xml:space="preserve">
    <value>Séparateur de segment</value>
    <comment>List</comment>
  </data>
  <data name="SourceLedger" xml:space="preserve">
    <value>Livre auxiliaire source</value>
    <comment>Integration - Table Column</comment>
  </data>
  <data name="SourceType" xml:space="preserve">
    <value>Type source</value>
    <comment>Integration - Table Column</comment>
  </data>
  <data name="WarningArglrefInvalid" xml:space="preserve">
    <value>Le type de transaction &quot;{0}&quot; et le champ de transaction GL &quot;{1}&quot; ne peuvent pas être combinés.</value>
    <comment>Error</comment>
  </data>
  <data name="ReceiptPostingSequence" xml:space="preserve">
    <value>Séquence report encaissement</value>
    <comment>Field</comment>
  </data>
  <data name="Refund" xml:space="preserve">
    <value>Remboursement</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="RefundPostingSequence" xml:space="preserve">
    <value>Séquence report remboursement</value>
    <comment>Field</comment>
  </data>
  <data name="UnappliedCash" xml:space="preserve">
    <value>Comptant non imputé</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="WriteOff" xml:space="preserve">
    <value>Annulation</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="Adjustment" xml:space="preserve">
    <value>Ajustement</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="CreditNote" xml:space="preserve">
    <value>Note de crédit</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="DebitNote" xml:space="preserve">
    <value>Note de débit</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="Invoice" xml:space="preserve">
    <value>Facture</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="Revaluation" xml:space="preserve">
    <value>Réévaluation</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="Rounding" xml:space="preserve">
    <value>Arrondi</value>
    <comment>Integration - Table Row</comment>
  </data>
  <data name="Prepayment" xml:space="preserve">
    <value>Paiement anticipé</value>
    <comment>Integration - Table Row</comment>
  </data>
</root>