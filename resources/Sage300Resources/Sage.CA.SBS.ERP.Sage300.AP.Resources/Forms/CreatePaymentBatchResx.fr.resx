<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="At" xml:space="preserve">
    <value>Heure</value>
    <comment>Select - Field</comment>
  </data>
  <data name="CurrencyDesc" xml:space="preserve">
    <value>Description devise</value>
    <comment>Rates - Field</comment>
  </data>
  <data name="DataLastMaintained" xml:space="preserve">
    <value>Dernière modification des données</value>
  </data>
  <data name="DiscountsAvailableFrom" xml:space="preserve">
    <value>Remises offertes du</value>
    <comment>Criteria - Field</comment>
  </data>
  <data name="DiscountsAvailableTo" xml:space="preserve">
    <value>Remises offertes au</value>
    <comment>Criteria - Field</comment>
  </data>
  <data name="DocumentToProcess" xml:space="preserve">
    <value>Document à traiter</value>
  </data>
  <data name="DueOnOrBefore" xml:space="preserve">
    <value>À payer le ou avant le</value>
    <comment>Criteria - Field</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>Créer lot de paiements de CF</value>
    <comment>Screen Title</comment>
  </data>
  <data name="IncludeBypassed" xml:space="preserve">
    <value>Inclure sommes à payer omises dans registre de paiements</value>
    <comment>Error</comment>
  </data>
  <data name="IncludeBypassedHelp" xml:space="preserve">
    <value>Inclure sur le registre les paiements qui sont échus, mais qui sont exclus du lot car ils ont été entrés avec des contrôles de paiement ou bien parce qu'ils figurent sur la liste des exclusions. Utilisez cette option pour vérifier les factures qui ne seront pas payées par suite d'une ancienne retenue ou une retenue trop vaste visant la plage de fournisseurs.</value>
    <comment>Hover Help</comment>
  </data>
  <data name="invalidPaymentSelectionCode" xml:space="preserve">
    <value>Le code de sélection de paiement {0} est introuvable.</value>
  </data>
  <data name="LastManualCheck" xml:space="preserve">
    <value>Dernier chèque manuel imprimé le</value>
    <comment>Select - Field</comment>
  </data>
  <data name="LastPaymentRegister" xml:space="preserve">
    <value>Dernier registre paiements imprimé le</value>
    <comment>Select - Field</comment>
  </data>
  <data name="LastSystemCheck" xml:space="preserve">
    <value>Dernier chèque système imprimé le</value>
    <comment>Select - Field</comment>
  </data>
  <data name="NoOustandingBatches" xml:space="preserve">
    <value>Aucun lots de paiements en retard</value>
    <comment>Status</comment>
  </data>
  <data name="OptionalFieldDesc" xml:space="preserve">
    <value>Description champ optionnel</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="OustandingBatches" xml:space="preserve">
    <value>Il existe des lots de paiements en retard</value>
    <comment>Status</comment>
  </data>
  <data name="PaymentRegister" xml:space="preserve">
    <value>Registre de paiements</value>
    <comment>Select - Group</comment>
  </data>
  <data name="ProratebyAmount" xml:space="preserve">
    <value>Ventiler par montant</value>
    <comment>Select - List Option</comment>
  </data>
  <data name="RateTypeDesc" xml:space="preserve">
    <value>Description type de taux</value>
    <comment>Rates - Field</comment>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Registre</value>
    <comment>Button</comment>
  </data>
  <data name="SelectionCode" xml:space="preserve">
    <value>Code de sélection</value>
    <comment>Field</comment>
  </data>
  <data name="SelectionCodeDesc" xml:space="preserve">
    <value>Description code de sélection</value>
    <comment>Field</comment>
  </data>
  <data name="SelectionCodeHelp" xml:space="preserve">
    <value>Les codes de sélection de paiements définissent les critères de sélection des factures en retard et les critères de création de transactions pour les payer.</value>
    <comment>Hover Help</comment>
  </data>
  <data name="SelectionCriteria" xml:space="preserve">
    <value>Critères de sélection</value>
  </data>
  <data name="TopDown" xml:space="preserve">
    <value>Imputer intégralement</value>
    <comment>Select - List Option</comment>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Valeur</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="ValueDesc" xml:space="preserve">
    <value>Description valeur</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="ValueSet" xml:space="preserve">
    <value>Valeur définie</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="VendorNo1" xml:space="preserve">
    <value>Numéro fournisseur</value>
    <comment>Exclusion - Table Column</comment>
  </data>
</root>