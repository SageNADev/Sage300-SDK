<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="At" xml:space="preserve">
    <value>Time</value>
    <comment>Select - Field</comment>
  </data>
  <data name="CurrencyDesc" xml:space="preserve">
    <value>Currency Description</value>
    <comment>Rates - Field</comment>
  </data>
  <data name="DataLastMaintained" xml:space="preserve">
    <value>Data Last Maintained</value>
  </data>
  <data name="DiscountsAvailableFrom" xml:space="preserve">
    <value>Discounts Available From</value>
    <comment>Criteria - Field</comment>
  </data>
  <data name="DiscountsAvailableTo" xml:space="preserve">
    <value>Discounts Available To</value>
    <comment>Criteria - Field</comment>
  </data>
  <data name="DocumentToProcess" xml:space="preserve">
    <value>Document to Process</value>
  </data>
  <data name="DueOnOrBefore" xml:space="preserve">
    <value>Due On or Before</value>
    <comment>Criteria - Field</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>A/P Create Payment Batch</value>
    <comment>Screen Title</comment>
  </data>
  <data name="IncludeBypassed" xml:space="preserve">
    <value>Include Bypassed Payables on Payment Register</value>
    <comment>Error</comment>
  </data>
  <data name="IncludeBypassedHelp" xml:space="preserve">
    <value>Include payments on the payment register that are due but are excluded from the batch because they have payment controls, or are on the exclusion list. Use this to check which invoices will not be paid as a result of an old hold or a too-generalized hold on a range of vendors.</value>
    <comment>Hover Help</comment>
  </data>
  <data name="invalidPaymentSelectionCode" xml:space="preserve">
    <value>Cannot find payment selection code {0}.</value>
  </data>
  <data name="LastManualCheck" xml:space="preserve">
    <value>Last Manual Check Printed On</value>
    <comment>Select - Field</comment>
  </data>
  <data name="LastPaymentRegister" xml:space="preserve">
    <value>Last Payment Register Printed On</value>
    <comment>Select - Field</comment>
  </data>
  <data name="LastSystemCheck" xml:space="preserve">
    <value>Last System Check Printed On</value>
    <comment>Select - Field</comment>
  </data>
  <data name="NoOustandingBatches" xml:space="preserve">
    <value>No outstanding payment batches</value>
    <comment>Status</comment>
  </data>
  <data name="OptionalFieldDesc" xml:space="preserve">
    <value>Optional Field Description</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="OustandingBatches" xml:space="preserve">
    <value>There are outstanding payment batches</value>
    <comment>Status</comment>
  </data>
  <data name="PaymentRegister" xml:space="preserve">
    <value>Payment Register</value>
    <comment>Select - Group</comment>
  </data>
  <data name="ProratebyAmount" xml:space="preserve">
    <value>Prorate by Amount</value>
    <comment>Select - List Option</comment>
  </data>
  <data name="RateTypeDesc" xml:space="preserve">
    <value>Rate Type Description</value>
    <comment>Rates - Field</comment>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
    <comment>Button</comment>
  </data>
  <data name="SelectionCode" xml:space="preserve">
    <value>Selection Code</value>
    <comment>Field</comment>
  </data>
  <data name="SelectionCodeDesc" xml:space="preserve">
    <value>Selection Code Description</value>
    <comment>Field</comment>
  </data>
  <data name="SelectionCodeHelp" xml:space="preserve">
    <value>Payment selection codes define criteria for selecting outstanding invoices and generating transactions to pay them.</value>
    <comment>Hover Help</comment>
  </data>
  <data name="SelectionCriteria" xml:space="preserve">
    <value>Selection Criteria</value>
  </data>
  <data name="TopDown" xml:space="preserve">
    <value>Top Down</value>
    <comment>Select - List Option</comment>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="ValueDesc" xml:space="preserve">
    <value>Value Description</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="ValueSet" xml:space="preserve">
    <value>Value Set</value>
    <comment>Optional Fields - Table Column</comment>
  </data>
  <data name="VendorNo1" xml:space="preserve">
    <value>Vendor Number</value>
    <comment>Exclusion - Table Column</comment>
  </data>
</root>