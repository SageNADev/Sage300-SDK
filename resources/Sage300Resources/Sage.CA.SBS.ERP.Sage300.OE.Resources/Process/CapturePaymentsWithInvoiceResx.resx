<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Entity" xml:space="preserve">
    <value>O/E Capture Payments with Invoices</value>
  </data>
  <data name="BatchDate" xml:space="preserve">
    <value>A/R Receipt Batch Date</value>
  </data>
  <data name="FromOrderNumber" xml:space="preserve">
    <value>From Order Number</value>
  </data>
  <data name="ToOrderNumber" xml:space="preserve">
    <value>To Order Number</value>
  </data>
  <data name="FromShipmentNumber" xml:space="preserve">
    <value>From Shipment Number</value>
  </data>
  <data name="ToShipmentNumber" xml:space="preserve">
    <value>To Shipment Number</value>
  </data>
  <data name="FromProcessingCode" xml:space="preserve">
    <value>From Processing Code</value>
  </data>
  <data name="ToProcessingCode" xml:space="preserve">
    <value>To Processing Code</value>
  </data>
  <data name="FirstGeneratedOEInvoiceNumbe" xml:space="preserve">
    <value>First Generated O/E Invoice Number</value>
  </data>
  <data name="LastGeneratedOEInvoiceNumber" xml:space="preserve">
    <value>Last Generated O/E Invoice Number</value>
  </data>
  <data name="FirstGeneratedARBatchNumber" xml:space="preserve">
    <value>First Generated A/R Batch Number</value>
  </data>
  <data name="LastGeneratedARBatchNumber" xml:space="preserve">
    <value>Last Generated A/R Batch Number</value>
  </data>
  <data name="ProcessCommand" xml:space="preserve">
    <value>Process Command</value>
  </data>
  <data name="NoOperation" xml:space="preserve">
    <value>No Operation</value>
  </data>
  <data name="GenerateResultsTable" xml:space="preserve">
    <value>Generate Results Table</value>
  </data>
  <data name="ClearResultsTable" xml:space="preserve">
    <value>Clear Results Table</value>
  </data>
  <data name="DeselectAllResults" xml:space="preserve">
    <value>Deselect All Results</value>
  </data>
  <data name="SelectAllResults" xml:space="preserve">
    <value>Select All Results</value>
  </data>
  <data name="CaptureSelectedOrders" xml:space="preserve">
    <value>Capture Selected Orders</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="ApplyNone" xml:space="preserve">
    <value>Apply None</value>
  </data>
  <data name="CaptureAndInvoice" xml:space="preserve">
    <value>Capture and Invoice</value>
  </data>
  <data name="OrderNumber" xml:space="preserve">
    <value>Order Number</value>
  </data>
  <data name="PrintInvoicesAfterCapture" xml:space="preserve">
    <value>Print Invoices After Capture</value>
  </data>
  <data name="PrintReceiptsAfterCapture" xml:space="preserve">
    <value>Print Receipts After Capture</value>
  </data>
  <data name="ProcessingCode" xml:space="preserve">
    <value>Processing Code</value>
  </data>
  <data name="RestoreDefaults" xml:space="preserve">
    <value>Restore Defaults</value>
  </data>
  <data name="ShipmentNumber" xml:space="preserve">
    <value>Shipment Number</value>
  </data>
  <data name="FilterFrom" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="FilterTo" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="CapturePayment" xml:space="preserve">
    <value>Capture Payment</value>
  </data>
  <data name="CapturePaymentPart1" xml:space="preserve">
    <value>Capture Payment Part 1</value>
  </data>
  <data name="CapturePaymentPart2" xml:space="preserve">
    <value>Capture Payment Part 2</value>
  </data>
  <data name="LockedByOtherUser" xml:space="preserve">
    <value>You cannot open this screen because another user is using it.</value>
  </data>
  <data name="ApplyAll" xml:space="preserve">
    <value>Apply All</value>
  </data>
  <data name="OrdersNotSelected" xml:space="preserve">
    <value>You must select one or more orders with pre-authorized payments to capture and invoice.</value>
  </data>
  <data name="CaptureFailureError" xml:space="preserve">
    <value>Unable to capture pre-authorized payment.</value>
  </data>
  <data name="CaptureOrderShipmentErrorWarnings" xml:space="preserve">
    <value>Order {0} and shipment {1} reported errors or warnings while capturing payment</value>
  </data>
</root>