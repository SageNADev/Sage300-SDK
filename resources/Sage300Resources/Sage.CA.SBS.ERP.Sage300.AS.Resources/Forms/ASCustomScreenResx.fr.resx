<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Module" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="ManageHeader" xml:space="preserve">
    <value>Gestion des personnalisations</value>
  </data>
  <data name="Assign" xml:space="preserve">
    <value>Assigner</value>
  </data>
  <data name="AdvancedMode" xml:space="preserve">
    <value>Mode avancé</value>
  </data>
  <data name="Import" xml:space="preserve">
    <value>Importer</value>
  </data>
  <data name="ImportHeader" xml:space="preserve">
    <value>Importer des packages de personnalisation</value>
  </data>
  <data name="PackageDesc" xml:space="preserve">
    <value>Description du package</value>
  </data>
  <data name="PackageFile" xml:space="preserve">
    <value>Fichier du package</value>
  </data>
  <data name="DeleteMessage" xml:space="preserve">
    <value>Voulez-vous vraiment supprimer ce package?</value>
  </data>
  <data name="DetailHeader" xml:space="preserve">
    <value>Détails de personnalisation</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Personnalisation</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="EnableAll" xml:space="preserve">
    <value>Activer tout</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>État</value>
  </data>
  <data name="Priority" xml:space="preserve">
    <value>Priorité</value>
  </data>
  <data name="Manage" xml:space="preserve">
    <value>Gérer</value>
  </data>
  <data name="PackageID" xml:space="preserve">
    <value>Code package</value>
  </data>
  <data name="DisableAll" xml:space="preserve">
    <value>Désactiver tout</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Entreprise</value>
  </data>
  <data name="TargetScreen" xml:space="preserve">
    <value>Écran cible</value>
  </data>
  <data name="Vendor" xml:space="preserve">
    <value>Fournisseur</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Désactivé</value>
  </data>
  <data name="DuplicateMessage" xml:space="preserve">
    <value>Ce package a déjà été importé. Si vous voulez importer une nouvelle version, vous devez d'abord supprimer la version précédemment importée.</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>Activé</value>
  </data>
  <data name="ImportMessage" xml:space="preserve">
    <value>Package de personnalisation correctement importé.</value>
  </data>
  <data name="InvalidPackage" xml:space="preserve">
    <value>Sélectionnez un package de personnalisation valide.</value>
  </data>
  <data name="SaveMessage" xml:space="preserve">
    <value>Paramètres de package de personnalisation correctement enregistrés.</value>
  </data>
  <data name="AllImportedDesc" xml:space="preserve">
    <value>Tous les packages importés</value>
  </data>
  <data name="AssignPackage" xml:space="preserve">
    <value>Package de personnalisation correctement assigné.</value>
  </data>
  <data name="SaveConfirmation" xml:space="preserve">
    <value>Il y a des modifications non enregistrées pour ce package. Voulez-vous continuer?</value>
  </data>
  <data name="ColumnName" xml:space="preserve">
    <value>Nom</value>
  </data>
  <data name="DeletePackage" xml:space="preserve">
    <value>Voulez-vous supprimer ce package?</value>
  </data>
  <data name="DuplicatePriority" xml:space="preserve">
    <value>La priorité {0} a déjà été assignée à une autre personnalisation pour cet écran.</value>
  </data>
  <data name="DeployCustomization" xml:space="preserve">
    <value>Déploiement de personnalisation</value>
  </data>
  <data name="ThisScreen" xml:space="preserve">
    <value>cet écran</value>
  </data>
  <data name="IsEqualTo" xml:space="preserve">
    <value>Est égal à</value>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>Commence par</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Effacer</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Filtrer</value>
  </data>
  <data name="FilterInfo" xml:space="preserve">
    <value>Afficher les éléments dont la valeur :</value>
  </data>
</root>