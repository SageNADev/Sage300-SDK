<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="By" xml:space="preserve">
    <value>par</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copier</value>
    <comment>Button</comment>
  </data>
  <data name="CopyDefaultCalcPrice" xml:space="preserve">
    <value>Taux de change pour Prix par défaut/Calculer prix en utilisant le coût ({0} à {1})</value>
    <comment>Conditional Text</comment>
  </data>
  <data name="CopyExistingDates" xml:space="preserve">
    <value>Copier les dates existantes</value>
  </data>
  <data name="CreatetheSelectedFields" xml:space="preserve">
    <value>Créer les champs sélectionnés</value>
    <comment>Fieldset</comment>
  </data>
  <data name="CurrencyCodeDescription" xml:space="preserve">
    <value>Description code de devise</value>
    <comment>Field</comment>
  </data>
  <data name="DiscountMarkupInformation" xml:space="preserve">
    <value>Information remise/majoration</value>
    <comment>Check Box</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>Copier le prix des articles de GS</value>
    <comment>Screen Title</comment>
  </data>
  <data name="FromCurrencyCode" xml:space="preserve">
    <value>De code de devise</value>
  </data>
  <data name="NoSegmentsMessage" xml:space="preserve">
    <value>Vous devez définir des segments d'article avant de pouvoir copier le prix de l'article.</value>
    <comment>Message</comment>
  </data>
  <data name="Operation" xml:space="preserve">
    <value>Opération</value>
    <comment>Field</comment>
  </data>
  <data name="PriceCheckInformation" xml:space="preserve">
    <value>Information vérification du prix</value>
    <comment>Check Box</comment>
  </data>
  <data name="PriceListDates" xml:space="preserve">
    <value>Dates liste de prix</value>
    <comment>List</comment>
  </data>
  <data name="PriceListDescription" xml:space="preserve">
    <value>Description liste de prix</value>
    <comment>Field</comment>
  </data>
  <data name="Ratedoesnotexist" xml:space="preserve">
    <value>Le taux n'existe pas</value>
  </data>
  <data name="Rateexists" xml:space="preserve">
    <value>Le taux existe</value>
  </data>
  <data name="RateIscalculated" xml:space="preserve">
    <value>Le taux est calculé</value>
  </data>
  <data name="SalesEnds" xml:space="preserve">
    <value>Ventes commencent</value>
  </data>
  <data name="SalesStarts" xml:space="preserve">
    <value>Ventes se terminent</value>
  </data>
  <data name="SelectFields" xml:space="preserve">
    <value>Sélectionner les champs</value>
    <comment>Fieldset</comment>
  </data>
  <data name="TaxInformation" xml:space="preserve">
    <value>Information taxe</value>
    <comment>Check Box</comment>
  </data>
  <data name="ToCurrencyCode" xml:space="preserve">
    <value>À code de devise</value>
  </data>
  <data name="ToPriceList" xml:space="preserve">
    <value>À liste de prix</value>
  </data>
  <data name="Using" xml:space="preserve">
    <value>Utilisant</value>
    <comment>List</comment>
  </data>
  <data name="UseSpecifiedDates" xml:space="preserve">
    <value>Utiliser les dates spécifiées</value>
  </data>
  <data name="NoExchangeRate" xml:space="preserve">
    <value>Il n'y a pas de taux de change pour cette devise.</value>
    <comment>Error message</comment>
  </data>
  <data name="DateNotInRange" xml:space="preserve">
    <value>La date saisie est hors de la plage spécifiée dans le profil de l'entreprise.</value>
  </data>
  <data name="DefaultOrCalculateRateType" xml:space="preserve">
    <value>Le type de taux calcul/par défaut {0} n'existe pas.</value>
    <comment>Error message</comment>
  </data>
  <data name="MarkupFactorError" xml:space="preserve">
    <value>Le facteur de majoration doit être supérieur ou égal à 1.</value>
    <comment>Error message</comment>
  </data>
</root>