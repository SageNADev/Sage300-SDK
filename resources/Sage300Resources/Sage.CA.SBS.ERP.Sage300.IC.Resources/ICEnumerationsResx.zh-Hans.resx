<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Adjustment" xml:space="preserve">
    <value>调整</value>
  </data>
  <data name="CommissionPaid" xml:space="preserve">
    <value>已付佣金</value>
    <comment>Category Screen</comment>
  </data>
  <data name="Complete" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="Costed" xml:space="preserve">
    <value>已计算成本</value>
    <comment>Record Status</comment>
  </data>
  <data name="DayEndCompleted" xml:space="preserve">
    <value>日终处理完成</value>
    <comment>Record Status</comment>
  </data>
  <data name="DefaultAndTranferOptionalFields" xml:space="preserve">
    <value>默认和转移可选字段</value>
    <comment>Adjustments Process command</comment>
  </data>
  <data name="Entered" xml:space="preserve">
    <value>输入</value>
    <comment>Record Status</comment>
  </data>
  <data name="InsertOptionalFields" xml:space="preserve">
    <value>插入可选字段</value>
    <comment>Process Command</comment>
  </data>
  <data name="Leave" xml:space="preserve">
    <value>保留</value>
    <comment>Additional cost allocation type</comment>
  </data>
  <data name="Nothingtoprocess" xml:space="preserve">
    <value>没有可处理的记录</value>
    <comment>Process Command</comment>
  </data>
  <data name="Posted" xml:space="preserve">
    <value>已过帐</value>
    <comment>Record Status</comment>
  </data>
  <data name="Prorate" xml:space="preserve">
    <value>摊配</value>
    <comment>Additional cost allocation type</comment>
  </data>
  <data name="ProrateEqually" xml:space="preserve">
    <value>平均摊配</value>
  </data>
  <data name="QuantityCommitted" xml:space="preserve">
    <value>已提交数量</value>
  </data>
  <data name="QuantityonPO" xml:space="preserve">
    <value>订购单上的数量</value>
  </data>
  <data name="QuantityonSO" xml:space="preserve">
    <value>销货单上的数量</value>
  </data>
  <data name="Receipt" xml:space="preserve">
    <value>收款</value>
  </data>
  <data name="Return" xml:space="preserve">
    <value>退货</value>
  </data>
  <data name="TransitReceipt" xml:space="preserve">
    <value>中转进货</value>
  </data>
  <data name="TransitTransfer" xml:space="preserve">
    <value>中转转移</value>
  </data>
  <data name="UpdatePrintFlag" xml:space="preserve">
    <value>更新打印旗标</value>
  </data>
  <data name="UpdateTransferSlipPrintFlag" xml:space="preserve">
    <value>更新转移单打印旗标</value>
  </data>
</root>