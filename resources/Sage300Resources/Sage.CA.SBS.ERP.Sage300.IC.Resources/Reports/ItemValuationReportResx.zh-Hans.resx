<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChkDefItemPriceLst" xml:space="preserve">
    <value>默认货品价目表</value>
    <comment>Check Box</comment>
  </data>
  <data name="ChkLastCost" xml:space="preserve">
    <value>上一成本</value>
    <comment>Check Box</comment>
  </data>
  <data name="CutoffDate" xml:space="preserve">
    <value>截止日期</value>
    <comment>Field</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>存货控制货品估价报表</value>
    <comment>Screen Title</comment>
  </data>
  <data name="FraCost" xml:space="preserve">
    <value>为估价选择最多4种成本计算方法</value>
    <comment>Fieldset Title</comment>
  </data>
  <data name="Landed" xml:space="preserve">
    <value>抵岸</value>
    <comment>Check Box</comment>
  </data>
  <data name="LblCost" xml:space="preserve">
    <value>成本</value>
    <comment>Field</comment>
  </data>
  <data name="LblIn" xml:space="preserve">
    <value>方式</value>
    <comment>List</comment>
  </data>
  <data name="LblPrintTransDtl" xml:space="preserve">
    <value>打印交易明细</value>
    <comment>Check Box</comment>
  </data>
  <data name="LblSelectTransaction" xml:space="preserve">
    <value>选择交易按</value>
    <comment>List</comment>
  </data>
  <data name="MoreCheckedMessage" xml:space="preserve">
    <value>您可以选择不超过4种成本计算方法。</value>
    <comment>Message</comment>
  </data>
  <data name="NoSegmentsMessage" xml:space="preserve">
    <value>您必须定义货品节段之后才可以打印货品估价报表。</value>
    <comment>Message</comment>
  </data>
  <data name="SegLblColor" xml:space="preserve">
    <value>颜色</value>
    <comment>List item</comment>
  </data>
  <data name="SegLblLong" xml:space="preserve">
    <value>长</value>
    <comment>List item</comment>
  </data>
  <data name="SegLblModel" xml:space="preserve">
    <value>型号</value>
    <comment>List item</comment>
  </data>
  <data name="SegLblSeries" xml:space="preserve">
    <value>系列</value>
    <comment>List item</comment>
  </data>
  <data name="SegLblStyle" xml:space="preserve">
    <value>样式</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblDangerousItem" xml:space="preserve">
    <value>危险货品</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblExtendedWarrantyAvailable" xml:space="preserve">
    <value>延展保修可用</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblItemLeadTime" xml:space="preserve">
    <value>货品交货时间</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblItemProcurement" xml:space="preserve">
    <value>货品采购</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblItemsColor" xml:space="preserve">
    <value>货品颜色</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblItemSize" xml:space="preserve">
    <value>货品尺寸</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblItemType" xml:space="preserve">
    <value>货品类型</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblItemVolume" xml:space="preserve">
    <value>货品量</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblManufacturer" xml:space="preserve">
    <value>制造商</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblManufacturerNo" xml:space="preserve">
    <value>制造商编号</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblNewItem" xml:space="preserve">
    <value>新货品</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblPrice" xml:space="preserve">
    <value>价格</value>
    <comment>List item</comment>
  </data>
  <data name="SortLblWarrantyPeriod" xml:space="preserve">
    <value>保修期间</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboincludeAll" xml:space="preserve">
    <value>所有</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboincludeNonzero" xml:space="preserve">
    <value>非零的</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboincludeOminus" xml:space="preserve">
    <value>仅为负的</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboincludeOplus" xml:space="preserve">
    <value>仅为正的</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboincludeOzero" xml:space="preserve">
    <value>仅为零的</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboLocationDetailCosts" xml:space="preserve">
    <value>地点明细成本</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboprintConsolLoc" xml:space="preserve">
    <value>合并的地点</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboprintItemsbyLoc" xml:space="preserve">
    <value>按地点划分的货品</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboprintSeparateLoc" xml:space="preserve">
    <value>分列的地点</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboSelectbyDate" xml:space="preserve">
    <value>截止日期</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboSelectbyFiscYear" xml:space="preserve">
    <value>财务年度/期间</value>
    <comment>List item</comment>
  </data>
  <data name="ValCboTransactionCosts" xml:space="preserve">
    <value>交易成本</value>
    <comment>List item</comment>
  </data>
  <data name="FromCutOffDate" xml:space="preserve">
    <value>从截止日期</value>
  </data>
  <data name="LblFromYearPeriod" xml:space="preserve">
    <value>从年度/期间</value>
    <comment>Label</comment>
  </data>
  <data name="LblIncludeCost" xml:space="preserve">
    <value>包括成本</value>
    <comment>Label</comment>
  </data>
  <data name="LblIncludeQuantites" xml:space="preserve">
    <value>包括数量</value>
    <comment>Label</comment>
  </data>
  <data name="ZeroCheckedMessage" xml:space="preserve">
    <value>必须选择至少一个成本计算方法。</value>
    <comment>message</comment>
  </data>
</root>