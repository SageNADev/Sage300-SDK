<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PostSequenceNumber" xml:space="preserve">
    <value>过帐序列编号</value>
  </data>
  <data name="RecordDeleted" xml:space="preserve">
    <value>记录已删除</value>
  </data>
  <data name="RecordPrinted" xml:space="preserve">
    <value>记录已打印</value>
  </data>
  <data name="RecordStatus" xml:space="preserve">
    <value>记录状态</value>
  </data>
  <data name="TransactionNumber" xml:space="preserve">
    <value>交易编号</value>
  </data>
  <data name="EmployeeNumber" xml:space="preserve">
    <value>雇员编号</value>
  </data>
  <data name="EnteredBy" xml:space="preserve">
    <value>输入者</value>
  </data>
  <data name="ICUniqueDocumentNumber" xml:space="preserve">
    <value>存货控制唯一凭证编号</value>
  </data>
  <data name="InternalUsageDate" xml:space="preserve">
    <value>内部使用日期</value>
  </data>
  <data name="InternalUsageNumber" xml:space="preserve">
    <value>内部使用编号</value>
  </data>
  <data name="IsCanadianPayrollActive" xml:space="preserve">
    <value>&lt;加拿大薪资&gt;是否为活动？</value>
  </data>
  <data name="IsUSPayrollActive" xml:space="preserve">
    <value>&lt;美国薪资&gt;是否为活动？</value>
  </data>
  <data name="NextDetailLineNumber" xml:space="preserve">
    <value>下一明细行编号</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>存货控制内部使用</value>
    <comment>Added</comment>
  </data>
  <data name="UsedBy" xml:space="preserve">
    <value>使用者</value>
    <comment>Added</comment>
  </data>
  <data name="IC0282" xml:space="preserve">
    <value>内部使用批别编号</value>
  </data>
  <data name="IC0284" xml:space="preserve">
    <value>内部使用系列编号</value>
  </data>
  <data name="IC0286" xml:space="preserve">
    <value>内部使用明细</value>
  </data>
  <data name="IC0287" xml:space="preserve">
    <value>内部使用明细可选字段</value>
  </data>
  <data name="IC0288" xml:space="preserve">
    <value>内部使用标头</value>
  </data>
  <data name="IC0289" xml:space="preserve">
    <value>内部使用可选字段</value>
  </data>
  <data name="UsageAccount" xml:space="preserve">
    <value>使用科目</value>
  </data>
  <data name="UsageAccountDescription" xml:space="preserve">
    <value>使用科目描述</value>
  </data>
  <data name="AssetDescription" xml:space="preserve">
    <value>资产描述</value>
  </data>
  <data name="AssetQuantity" xml:space="preserve">
    <value>资产数量</value>
  </data>
  <data name="CloseLT" xml:space="preserve">
    <value>关闭LT</value>
  </data>
  <data name="CloseSN" xml:space="preserve">
    <value>关闭SN</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>公司</value>
  </data>
  <data name="Database" xml:space="preserve">
    <value>数据库</value>
  </data>
  <data name="ForcePopupLT" xml:space="preserve">
    <value>强制弹出LT</value>
  </data>
  <data name="ForcePopupSN" xml:space="preserve">
    <value>强制弹出SN</value>
  </data>
  <data name="GLAccount" xml:space="preserve">
    <value>使用科目</value>
  </data>
  <data name="InterprocessCommID" xml:space="preserve">
    <value>进程间指令标识</value>
  </data>
  <data name="LTSetID" xml:space="preserve">
    <value>LT集合标识</value>
  </data>
  <data name="NumberOfSerials" xml:space="preserve">
    <value>系列数目</value>
  </data>
  <data name="PopupLT" xml:space="preserve">
    <value>弹出LT</value>
  </data>
  <data name="PopupSN" xml:space="preserve">
    <value>弹出SN</value>
  </data>
  <data name="SageFixedAssetsAttached" xml:space="preserve">
    <value>Sage Fixed Assets Online</value>
  </data>
  <data name="SeparateQuantities" xml:space="preserve">
    <value>分列数量</value>
  </data>
  <data name="Template" xml:space="preserve">
    <value>模板</value>
  </data>
  <data name="AccountNumberInactiveValidation" xml:space="preserve">
    <value>{0}不是活动的。</value>
  </data>
  <data name="AccountNumberValidation" xml:space="preserve">
    <value>无法找到{0}科目{1}。</value>
  </data>
  <data name="InternalUsageDescription" xml:space="preserve">
    <value>内部使用描述</value>
  </data>
  <data name="PostInsufficentQty" xml:space="preserve">
    <value>过帐这一内部使用将把这一地点的货品数量减少到零以下。是否继续？</value>
    <comment>Confirmation</comment>
  </data>
  <data name="PostInsufficentQtyError" xml:space="preserve">
    <value>存货数量不允许为负。</value>
  </data>
  <data name="ValueSetErrorMessage" xml:space="preserve">
    <value>尚未设置内部使用明细可选字段{0}的值。</value>
  </data>
</root>