<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplyToDoc" xml:space="preserve">
    <value>Apply to Document</value>
    <comment>Field</comment>
  </data>
  <data name="AutoAllocateFrom" xml:space="preserve">
    <value>Auto Allocate From</value>
    <comment>Check Box</comment>
  </data>
  <data name="AutoGen" xml:space="preserve">
    <value>Auto Generate</value>
    <comment>Button</comment>
  </data>
  <data name="ConfirmClearLots" xml:space="preserve">
    <value>Are you sure you want to clear all the lot numbers from the list?</value>
    <comment>Message</comment>
  </data>
  <data name="ConfirmClearSerials" xml:space="preserve">
    <value>Are you sure you want to clear all the serial numbers from the list?</value>
    <comment>Message</comment>
  </data>
  <data name="ConfirmDeleteLot" xml:space="preserve">
    <value>Are you sure you want to delete the lot number?</value>
    <comment>Message</comment>
  </data>
  <data name="ConfirmDeleteSerial" xml:space="preserve">
    <value>Are you sure you want to delete the serial number?</value>
    <comment>Message</comment>
  </data>
  <data name="ConfirmPost" xml:space="preserve">
    <value>Do you want to post this {0}?</value>
    <comment>Message</comment>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Internal Usage Date</value>
    <comment>Field</comment>
  </data>
  <data name="DateBus" xml:space="preserve">
    <value>Posting Date</value>
    <comment>Field</comment>
  </data>
  <data name="EachLotHas" xml:space="preserve">
    <value>Each Lot Has</value>
    <comment>Field</comment>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>I/C Serial/Lot Reconciliations</value>
    <comment>Screen Title</comment>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
    <comment>Field</comment>
  </data>
  <data name="KITITEMINVOICE" xml:space="preserve">
    <value>Do you want to display kit component items?</value>
    <comment>Message</comment>
  </data>
  <data name="LOCATIONINACTIVE" xml:space="preserve">
    <value>Location {0} is not active.</value>
    <comment>Message</comment>
  </data>
  <data name="LOCATIONNOTALLOWED" xml:space="preserve">
    <value>Serial/Lot Item is not allowed at this location.</value>
    <comment>Error</comment>
  </data>
  <data name="LotNotAvailable" xml:space="preserve">
    <value>Lot Number {0} is not available.</value>
    <comment>Error</comment>
  </data>
  <data name="LOTNUMWRONGFORMAT" xml:space="preserve">
    <value>The lot number is not valid for the current lot number mask.</value>
    <comment>Error</comment>
  </data>
  <data name="LotQtyRequired" xml:space="preserve">
    <value>Lot Quantity Required</value>
    <comment>Group Item</comment>
  </data>
  <data name="Make" xml:space="preserve">
    <value>Make</value>
    <comment>Field</comment>
  </data>
  <data name="NeedApplyToDoc" xml:space="preserve">
    <value>You must select an Invoice Number before specifying an Item Number.</value>
    <comment>Message</comment>
  </data>
  <data name="NextLotNumber" xml:space="preserve">
    <value>Next Lot Number</value>
    <comment>Field</comment>
  </data>
  <data name="NextSerialNumber" xml:space="preserve">
    <value>Next Serial Number</value>
    <comment>Field</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment>Field</comment>
  </data>
  <data name="NOLOCATIONFORITEM" xml:space="preserve">
    <value>Location {0} not found for Item {1}.</value>
    <comment>Message</comment>
  </data>
  <data name="OEInvoice" xml:space="preserve">
    <value>O/E Invoice</value>
    <comment>Dropdown Item</comment>
  </data>
  <data name="Or" xml:space="preserve">
    <value>OR</value>
    <comment>Label</comment>
  </data>
  <data name="POInvoice" xml:space="preserve">
    <value>P/O Invoice</value>
    <comment>Dropdown Item</comment>
  </data>
  <data name="QtyOverflow" xml:space="preserve">
    <value>Quantity exceeds maximum allowable quantity.</value>
    <comment>Message</comment>
  </data>
  <data name="QuantityExceedsLocation" xml:space="preserve">
    <value>Quantity cannot exceed the quantity available at the specified location.</value>
    <comment>Message</comment>
  </data>
  <data name="QuantityNeg" xml:space="preserve">
    <value>Quantities cannot be less than zero.</value>
    <comment>Message</comment>
  </data>
  <data name="Recall" xml:space="preserve">
    <value>Recall</value>
    <comment>Field</comment>
  </data>
  <data name="Reconciliation" xml:space="preserve">
    <value>Reconciliation</value>
    <comment>Field</comment>
  </data>
  <data name="Release" xml:space="preserve">
    <value>Release</value>
    <comment>Field</comment>
  </data>
  <data name="SerialNumsRequired" xml:space="preserve">
    <value>Serial Numbers Required</value>
    <comment>Group Item</comment>
  </data>
  <data name="StartupWarning" xml:space="preserve">
    <value>All transactions affecting inventory should be posted and Day End Processing run before using this transaction.</value>
    <comment>Message</comment>
  </data>
  <data name="UOM" xml:space="preserve">
    <value>UOM</value>
    <comment>Column</comment>
  </data>
  <data name="UsedBy" xml:space="preserve">
    <value>Used By</value>
    <comment>Field</comment>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
    <comment>Field</comment>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Field</comment>
  </data>
  <data name="ApplyToInvoiceNumber" xml:space="preserve">
    <value>Apply To Invoice Number</value>
    <comment>Finder</comment>
  </data>
  <data name="StockUnitOfMeasure" xml:space="preserve">
    <value>Stock Unit Of Measure</value>
    <comment>Field</comment>
  </data>
  <data name="ReconciliationHeaders" xml:space="preserve">
    <value>Reconciliation Headers</value>
  </data>
</root>