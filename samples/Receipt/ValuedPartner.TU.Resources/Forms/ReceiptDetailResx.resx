<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Entity" xml:space="preserve">
    <value>TU Receipt Detail</value>
  </data>
  <data name="SequenceNumber" xml:space="preserve">
    <value>Sequence Number</value>
  </data>
  <data name="LineNumber" xml:space="preserve">
    <value>Line Number</value>
  </data>
  <data name="ItemNumber" xml:space="preserve">
    <value>Item Number</value>
  </data>
  <data name="ItemDescription" xml:space="preserve">
    <value>Item Description</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="QuantityReceived" xml:space="preserve">
    <value>Quantity Received</value>
  </data>
  <data name="QuantityReturned" xml:space="preserve">
    <value>Quantity Returned</value>
  </data>
  <data name="UnitOfMeasure" xml:space="preserve">
    <value>Unit of Measure</value>
  </data>
  <data name="ConversionFactor" xml:space="preserve">
    <value>Conversion Factor</value>
  </data>
  <data name="ProratedAddlCostFunc" xml:space="preserve">
    <value>Prorated Add'l. Cost-Func.</value>
  </data>
  <data name="ProratedAddlCostSrc" xml:space="preserve">
    <value>Prorated Add'l. Cost-Src.</value>
  </data>
  <data name="UnitCost" xml:space="preserve">
    <value>Unit Cost</value>
  </data>
  <data name="AdjustedUnitCost" xml:space="preserve">
    <value>Adjusted Unit Cost</value>
  </data>
  <data name="AdjustedCost" xml:space="preserve">
    <value>Adjusted Cost</value>
  </data>
  <data name="AdjustedCostFunctional" xml:space="preserve">
    <value>Adjusted Cost-Functional</value>
  </data>
  <data name="ExtendedCost" xml:space="preserve">
    <value>Extended Cost</value>
  </data>
  <data name="ExtendedCostFunctional" xml:space="preserve">
    <value>Extended Cost-Functional</value>
  </data>
  <data name="ReturnCost" xml:space="preserve">
    <value>Return Cost</value>
  </data>
  <data name="CostingDate" xml:space="preserve">
    <value>Costing Date</value>
  </data>
  <data name="CostingSequenceNo" xml:space="preserve">
    <value>Costing Sequence No.</value>
  </data>
  <data name="OriginalReceiptQty" xml:space="preserve">
    <value>Original Receipt Qty.</value>
  </data>
  <data name="OriginalUnitCost" xml:space="preserve">
    <value>Original Unit Cost</value>
  </data>
  <data name="OriginalExtendedCost" xml:space="preserve">
    <value>Original Extended Cost</value>
  </data>
  <data name="OriginalExtendedCostFunc" xml:space="preserve">
    <value>Original Extended Cost-Func.</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="Labels" xml:space="preserve">
    <value>Labels</value>
  </data>
  <data name="StockItem" xml:space="preserve">
    <value>Stock Item</value>
  </data>
  <data name="ManufacturersItemNumber" xml:space="preserve">
    <value>Manufacturer's Item Number</value>
  </data>
  <data name="VendorItemNumber" xml:space="preserve">
    <value>Vendor Item Number</value>
  </data>
  <data name="DetailLineNumber" xml:space="preserve">
    <value>Detail Line Number</value>
  </data>
  <data name="QuantityReturnedToDate" xml:space="preserve">
    <value>Quantity Returned To Date</value>
  </data>
  <data name="ReturnedExtCostToDate" xml:space="preserve">
    <value>Returned Ext. Cost To Date</value>
  </data>
  <data name="ReturnedExtCostFuncToDate" xml:space="preserve">
    <value>Returned Ext. Cost-Func. To Date</value>
  </data>
  <data name="AdjustedExtCostToDate" xml:space="preserve">
    <value>Adjusted Ext. Cost To Date</value>
  </data>
  <data name="AdjustedExtCostFuncToDate" xml:space="preserve">
    <value>Adjusted Ext. Cost-Func. To Date</value>
  </data>
  <data name="PreviousDayEndReceiptQty" xml:space="preserve">
    <value>Previous Day-End Receipt Qty.</value>
  </data>
  <data name="PreviousDayEndUnitCost" xml:space="preserve">
    <value>Previous Day-End Unit Cost</value>
  </data>
  <data name="PreviousDayEndExtCost" xml:space="preserve">
    <value>Previous Day-End Ext. Cost</value>
  </data>
  <data name="PreviousDayEndExtCostFunc" xml:space="preserve">
    <value>Previous Day-End Ext. Cost-Func.</value>
  </data>
  <data name="UnformattedItemNumber" xml:space="preserve">
    <value>Unformatted Item Number</value>
  </data>
  <data name="CheckBelowZero" xml:space="preserve">
    <value>Check Below Zero</value>
  </data>
  <data name="RevisionListLineNumber" xml:space="preserve">
    <value>Revision List Line Number</value>
  </data>
  <data name="InterprocessCommID" xml:space="preserve">
    <value>Inter-process Comm. ID</value>
  </data>
  <data name="ForcePopupSN" xml:space="preserve">
    <value>Force Pop-up SN</value>
  </data>
  <data name="PopupSN" xml:space="preserve">
    <value>Pop-up SN</value>
  </data>
  <data name="CloseSN" xml:space="preserve">
    <value>Close SN</value>
  </data>
  <data name="LTSetID" xml:space="preserve">
    <value>LT Set ID</value>
  </data>
  <data name="ForcePopupLT" xml:space="preserve">
    <value>Force Pop-up LT</value>
  </data>
  <data name="PopupLT" xml:space="preserve">
    <value>Pop-up LT</value>
  </data>
  <data name="CloseLT" xml:space="preserve">
    <value>Close LT</value>
  </data>
  <data name="OptionalFields" xml:space="preserve">
    <value>Optional Fields</value>
  </data>
  <data name="ProcessCommand" xml:space="preserve">
    <value>Process Command</value>
  </data>
  <data name="SerialQuantity" xml:space="preserve">
    <value>Serial Quantity</value>
  </data>
  <data name="LotQuantity" xml:space="preserve">
    <value>Lot Quantity</value>
  </data>
  <data name="SerialQuantityReturned" xml:space="preserve">
    <value>Serial Quantity Returned</value>
  </data>
  <data name="LotQuantityReturned" xml:space="preserve">
    <value>Lot Quantity Returned</value>
  </data>
  <data name="SerialLotQuantityToProcess" xml:space="preserve">
    <value>Serial/Lot Quantity to Process</value>
  </data>
  <data name="NumberOfLotsToGenerate" xml:space="preserve">
    <value>Number of Lots to Generate</value>
  </data>
  <data name="QuantityperLot" xml:space="preserve">
    <value>Quantity per Lot</value>
  </data>
  <data name="ReceiptType" xml:space="preserve">
    <value>Receipt Type</value>
  </data>
  <data name="AllocateFromSerial" xml:space="preserve">
    <value>Allocate from Serial</value>
  </data>
  <data name="AllocateFromLot" xml:space="preserve">
    <value>Allocate from Lot</value>
  </data>
  <data name="SerialLotWindowHandle" xml:space="preserve">
    <value>Serial/Lot Window Handle</value>
  </data>
  <data name="NothingToProcess" xml:space="preserve">
    <value>Nothing to Process</value>
  </data>
  <data name="InsertOptionalFields" xml:space="preserve">
    <value>Insert Optional Fields</value>
  </data>
  <data name="AutogenerateSerials" xml:space="preserve">
    <value>Auto-generate Serials</value>
  </data>
  <data name="AutogenerateLots" xml:space="preserve">
    <value>Auto-generate Lots</value>
  </data>
  <data name="AutoallocateSerials" xml:space="preserve">
    <value>Auto-allocate Serials</value>
  </data>
  <data name="AutoallocateLots" xml:space="preserve">
    <value>Auto-allocate Lots</value>
  </data>
  <data name="ClearSerials" xml:space="preserve">
    <value>Clear Serials</value>
  </data>
  <data name="ClearLots" xml:space="preserve">
    <value>Clear Lots</value>
  </data>
  <data name="AutoassignSerials" xml:space="preserve">
    <value>Auto-assign Serials</value>
  </data>
  <data name="AutoassignLots" xml:space="preserve">
    <value>Auto-assign Lots</value>
  </data>
  <data name="PostSerialsLotsToICInventory" xml:space="preserve">
    <value>Post Serials/Lots to IC Inventory</value>
  </data>
  <data name="Receipt" xml:space="preserve">
    <value>Receipt</value>
  </data>
  <data name="Return" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="Adjustment" xml:space="preserve">
    <value>Adjustment</value>
  </data>
  <data name="Complete" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="DeletedRecord" xml:space="preserve">
    <value>The {0} has been deleted</value>
    <comment>Deleted the record</comment>
  </data>
  <data name="AllowBlank" xml:space="preserve">
    <value>AllowBlank</value>
  </data>
  <data name="AmountValue" xml:space="preserve">
    <value>Amount Value</value>
  </data>
  <data name="DateValue" xml:space="preserve">
    <value>Date Value</value>
  </data>
  <data name="Decimals" xml:space="preserve">
    <value>Decimals</value>
  </data>
  <data name="IntegerValue" xml:space="preserve">
    <value>Integer Value</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="NumberValue" xml:space="preserve">
    <value>Number Value </value>
  </data>
  <data name="OptionalField" xml:space="preserve">
    <value>Optional Field</value>
  </data>
  <data name="OptionalFieldDescription" xml:space="preserve">
    <value>Optional Field Description</value>
  </data>
  <data name="TextValue" xml:space="preserve">
    <value>Text Value</value>
  </data>
  <data name="TimeValue" xml:space="preserve">
    <value>Time Value</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="TypedValueFieldIndex" xml:space="preserve">
    <value>TypedValueFieldIndex</value>
  </data>
  <data name="Validate" xml:space="preserve">
    <value>Validate</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ValueDescription" xml:space="preserve">
    <value>Value Description</value>
  </data>
  <data name="ValueSet" xml:space="preserve">
    <value>ValueSet</value>
  </data>
  <data name="YesNoValue" xml:space="preserve">
    <value>Yes No Value</value>
  </data>
</root>