<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2017 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var resxName = view.Properties[BusinessView.ResxName];
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];
    var keyFieldName = view.Keys.FirstOrDefault();

    var webModuleNamespace = (settings.DoesAreasExist ? (settings.WebProjectIncludesModule ? moduleId + "." : string.Empty) + 
	"Web.Areas." + moduleId : moduleId + ".Web");

    var enumsCount = view.Enums.Count;

#>
// <#=copyright#>

#region Namespace

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Sage.CA.SBS.ERP.Sage300.Common.Resources;
using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Repository;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Web.Controllers.Finder;
using Sage.CA.SBS.ERP.Sage300.Common.Web.Utilities;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.Services;
using <#=companyNamespace#>.<#=moduleId#>.Models;
<#
	if (enumsCount > 0)
	{
#>
using <#=companyNamespace#>.<#=moduleId#>.Models.Enums;
<#
	}
#>
using <#=companyNamespace#>.<#=moduleId#>.Resources.Forms;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers.Finder
{
    /// <summary>
    /// Finder class for <#=entityName#>
    /// </summary>
    /// <typeparam name="T">Where T is type of <see cref="<#=modelName#>"/></typeparam>
    public class Find<#=entityName#>ControllerInternal<T> : BaseFindControllerInternal<T, I<#=entityName#>Service<T>>, IFinder
        where T : <#=modelName#>, new()
    {
        #region Private variables

        #endregion

        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="context">Context</param>
        public Find<#=entityName#>ControllerInternal(Context context)
            : base(context)
        {
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Get first or default <#=entityName#>
        /// </summary>
        /// <param name="id">Id for <#=modelName#></param>
        /// <returns>Get first or default <#=modelName#></returns>
        public virtual ModelBase Get(string id)
        {
            Expression<Func<T, bool>> filter = param => param.<#=keyFieldName#>.ToString() == id;
            Service.IsReadOnly = true;
            var model = Service.FirstOrDefault(filter);
            Service.IsReadOnly = false;
			return model;
        }

        /// <summary>
        /// Get the default columns
        /// </summary>
        /// <returns>Default columns</returns>
        public override List<string> GetDefaultColumns()
        {
            // TODO: All columns have been added and must be reduced to only default columns
            // TODO: Delete TODO statements when complete
            return new List<string> 
            {
<#
            // Iterate fields collection
            for (var i = 0; i < view.Fields.Count; i++)
            {
                // locals
                var field = view.Fields[i];
                var fieldName = field.Name;
#>
                "<#=fieldName#><#=(field.Type.Equals(BusinessDataType.Enumeration) ? "String" : string.Empty)#>"<#=(i.Equals(view.Fields.Count -1) ? string.Empty : ",")#>
<#
            }
#>
             };
       }

        /// <summary>
        /// Get all columns
        /// </summary>
        /// <returns>All columns</returns>
        public override IEnumerable<ModelBase> GetAllColumns()
        {

            var columns = new List<ModelBase>
            {
<#
            // Iterate fields collection
            for (var i = 0; i < view.Fields.Count; i++)
            {
                // locals
                var field = view.Fields[i];
                var fieldName = field.Name;

#>
                new GridField
                {
                    field = "<#=fieldName#><#=(field.Type.Equals(BusinessDataType.Enumeration) ? "String" : string.Empty)#>",
                    title = <#=resxName#>.<#=fieldName#>,
<#
                // Assign attributes based upon type
                var attributes = field.Type.Equals(BusinessDataType.Decimal) ||
                                    field.Type.Equals(BusinessDataType.Double) ||
                                    field.Type.Equals(BusinessDataType.Integer) ||
                                    field.Type.Equals(BusinessDataType.Long) ? "FinderConstant.CssClassGridColumn10NumRightAlign" :
                                    "FinderConstant.CssClassGridColumn10";
#>
                    attributes = <#=attributes#>,
                    headerAttributes = <#=attributes#>,
<#
                // Assign data type / Presentation List
                switch (field.Type)
                {
                    case BusinessDataType.Decimal:
                    case BusinessDataType.Double:
#>
                    dataType = FinderConstant.DataTypeAmount,
<#
                        break;
                    case BusinessDataType.Integer:
                    case BusinessDataType.Long:
#>
                    dataType = FinderConstant.DataTypeNumber
<#
                        break;
                    case BusinessDataType.String:
                        // UI Strings (Enumerations) are presentation lists
                        if (view.Enums.ContainsKey(fieldName))
                        {
#>
                    PresentationList = EnumUtility.GetItemsList<<#=fieldName#>>()<#=!view.Enums.ContainsKey(fieldName) ? "," : string.Empty#>
<#
                        }
                        else
                        {
#>
                    dataType = FinderConstant.DataTypeString<#=!view.Enums.ContainsKey(fieldName) ? "," : string.Empty#>
<#
                        }
                        break;
                    case BusinessDataType.DateTime:
#>
                    dataType = FinderConstant.DataTypeDate,
                    template = Utilities.GetGridTemplate("<#=fieldName#>")
<#
                        break;
                    case BusinessDataType.Boolean:
#>
                    dataType = FinderConstant.DataTypeString,
                    PresentationList = EnumUtility.GetItemsList<Sage.CA.SBS.ERP.Sage300.Common.Models.Enums.BooleanType>()
<#
                        break;
                    case BusinessDataType.TimeSpan:
#>
                    dataType = FinderConstant.DataTypeTime
<#
                        break;
                    default:
#>
                    PresentationList = EnumUtility.GetItemsList<<#=fieldName#>>()
<#
                        break;
                }

                // Custom Attributes
                if (field.Type.Equals(BusinessDataType.Decimal) || field.Type.Equals(BusinessDataType.Double) ||
                    (field.Type.Equals(BusinessDataType.String) && !view.Enums.ContainsKey(fieldName)))
                {
#>
                    customAttributes = 
                        new Dictionary<string, string>
                        {
<#
                    // String attributes
                    if (field.Type.Equals(BusinessDataType.String))
                    {
#>
                            {FinderConstant.CustomAttributeMaximumLength, "<#=field.Size#>"}<#=((field.IsAlphaNumeric || field.IsNumeric || field.IsUpperCase) ? "," : string.Empty)#>
<#
                        // Is numeric?
                        if (field.IsNumeric)
                        {
#>
                            {"class", FinderConstant.CssClassInputNumberRightAlign},
                            {FinderConstant.CustomAtrributeFormatTextBox, FinderConstant.Numeric}<#=((field.IsAlphaNumeric || field.IsUpperCase) ? "," : string.Empty)#>
<#
                        }

                        // Is alphanumeric or Is upper?
                        if (field.IsAlphaNumeric || field.IsUpperCase)
                        {
#>
                            {"class", FinderConstant.CssClassTxtUpper}<#=((field.IsAlphaNumeric) ? "," : string.Empty)#>
<#
                            // Is alphanumeric?
                            if (field.IsAlphaNumeric)
                            {
#>
                            {FinderConstant.CustomAtrributeFormatTextBox, FinderConstant.AlphaNumeric}
<#
                            }
                        }
                    }
                    else
                    {
                        // Amount attributes
#>
                            // TODO Value of 16 defaulted for max length. Modify as required
                            // TODO Delete TODO statements when complete
                            {FinderConstant.CustomAttributeMaximumLength, "16"},
                            {"class", FinderConstant.CssClassInputNumberRightAlign}
<#
                    }
#>
                        }
<#
                }
                else
                {
                }
#>
                }<#=(i.Equals(view.Fields.Count - 1) ? string.Empty : ",")#>
<#
            }
#>
            };

            return columns.AsEnumerable();
        }
        #endregion

    }
}