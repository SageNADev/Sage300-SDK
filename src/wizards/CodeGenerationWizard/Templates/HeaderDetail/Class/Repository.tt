<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2017 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var containerName = settings.EntitiesContainerName;
    var headerModelName = settings.Entities.Where(e => e.Properties["ViewId"] == settings.HeaderNode.Attribute("view").Value).First().Properties[BusinessView.ModelName];
#>
// <#=copyright#>

#region Namespace

using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Base;
using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Entity;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Utilities;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums.ExportImport;
using Sage.CA.SBS.ERP.Sage300.Common.Models.ExportImport;
using <#=companyNamespace#>.<#=moduleId#>.BusinessRepository.Mappers;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.BusinessRepository;
using <#=companyNamespace#>.<#=moduleId#>.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Exceptions;
using Sage.CA.SBS.ERP.Sage300.Common.Resources;

#endregion

namespace <#=companyNamespace#>.<#=moduleId#>.BusinessRepository
{
    /// <summary>
    /// Class <#=containerName#> Repository
    /// </summary>
    public class <#=containerName#>Repository : BaseHeaderDetailRepository, I<#=containerName#>Repository
    {
        #region Private Variables

<#
        var xmlEntities = settings.XmlEntities;
        var rotoId2EntityName = new Dictionary<string, string>();
        var rotoId2EntityVarName = new Dictionary<string, string>();

        foreach (var ent in xmlEntities.Root.Descendants().Where(e => e.Name == "entity"))
        {
            var entityName = ent.Attribute("entity").Value;
            var viewID = ent.Attribute("view").Value;
            rotoId2EntityName[viewID] = entityName;
            rotoId2EntityVarName[viewID] = entityName.ToLower().Substring(0, 1) + entityName.Substring(1);
        }
#>

<# // define business entities  #>
<# foreach(KeyValuePair<string, string> entry in rotoId2EntityVarName)
    {
        var entityVariableName = "_" + entry.Value + "Entity";
#>
        /// <summary>
        /// Business Entity - <#=entry.Key#>
        /// </summary>
        private IBusinessEntity <#=entityVariableName#>;

<#
}
#>
<# // define business entity mappers #>
<# foreach(KeyValuePair<string, string> entry in rotoId2EntityVarName)
    {
        if (settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity" && e.Attribute("view").Value == entry.Key).Count() == 0)
        {
            continue;
        }

        var entityMapperVariableName = "_" + entry.Value + "Mapper";
        var entityMapperVariableType = rotoId2EntityName[entry.Key] + "Mapper";
        var entityName = rotoId2EntityName[entry.Key];
        var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == entry.Key).First().Properties[BusinessView.ModelName];

#>
        /// <summary>
        /// Business Entity Mapper - <#=entry.Key#>
        /// </summary>
        private readonly <#=entityMapperVariableType#><<#=modelName#>> <#=entityMapperVariableName#>;

<#
}
#>

        #endregion

        #region Constructors

        /// <summary>
        /// Sets Context and DBLink
        /// </summary>
        /// <param name="context">Context</param>
        public <#=containerName#>Repository(Context context):base(context)
        {
<# 
            foreach(KeyValuePair<string, string> entry in rotoId2EntityVarName)
            {
                    // skip an entity that is not part of the header-detail tree
                    if (settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity" && e.Attribute("view").Value == entry.Key).Count() == 0)
                    {
                        continue;
                    }

                    var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == entry.Key).First().Properties[BusinessView.ModelName];

                    WriteLine(String.Format("{0}_{1}Mapper = new {2}Mapper<{3}>(context);", new string(' ', 12), entry.Value, rotoId2EntityName[entry.Key], modelName));
            }
#>
        
            CreateBusinessEntities();
        }

        #endregion

    
        #region Protected/public methods

        /// <summary>
        /// Additional Access Check for Export and Import
        /// </summary>
        /// <returns>User Access</returns>
        public UserAccess GetAccessRights()
        {
<#
            var headerEntityName = String.Format("_{0}Entity", rotoId2EntityVarName[settings.HeaderNode.Attribute("view").Value]);
#>

            var userAccess = base.GetAccessRights(<#=headerEntityName#>);
            if (SecurityCheck(Security.<#=moduleId#>Import))
            {
                userAccess.SecurityType |= SecurityType.Import;
            }
            if (SecurityCheck(Security.<#=moduleId#>Export))
            {
                userAccess.SecurityType |= SecurityType.Export;
            }
            return userAccess;
        }

         /// <summary>
        /// Open and compose business entities
        /// </summary>
        protected override void CreateBusinessEntities()
        {
<#
           // open all the entities
            foreach (var ent in xmlEntities.Root.Descendants().Where(e => e.Name == "entity"))
            {
                var viewID = ent.Attribute("view").Value;
                var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == viewID).First().Properties[BusinessView.ModelName];

                WriteLine(String.Format("{0}_{1}Entity = OpenEntity({2}.EntityName, true);", new string(' ', 12), rotoId2EntityVarName[viewID], modelName));
            }

            WriteLine("");

            ComposeAllViews(settings.HeaderNode, rotoId2EntityVarName);
#>
        }
<#
    var headerEntity = rotoId2EntityName[settings.HeaderNode.Attribute("view").Value];

#>

        /// <summary>
        /// Get <#=headerEntity#> based on the primary key
        /// </summary>
        /// <typeparam name="TKey">data type of the primary key</typeparam>
        /// <param name="id">key value</param>
        /// <returns><#=headerEntity#></returns>
        public <#=headerModelName#> GetById<TKey>(TKey id)
        {
<#

var headerMapperName = String.Format("_{0}Mapper", rotoId2EntityVarName[settings.HeaderNode.Attribute("view").Value]);

#>
            CheckRights(<#=headerEntityName#>, SecurityType.Inquire);

            var fields = GetKeyField(<#=headerEntityName#>);

            <#=headerEntityName#>.SetValue(fields[0].ID, id);

            return !<#=headerEntityName#>.Read(false) ? null : <#=headerMapperName#>.Map(<#=headerEntityName#>);
        }

       /// <summary>
        /// Save <#=headerEntity#> record
        /// </summary>
        /// <param name="model"><#=headerEntity#> model</param>
        /// <returns><#=headerEntity#></returns>
        public <#=headerModelName#> Save(<#=headerModelName#> model)
        {
            CheckRights(<#=headerEntityName#>, SecurityType.Modify);

            <#=headerMapperName#>.Map(model, <#=headerEntityName#>);
            <#=headerEntityName#>.Update();
            
            return <#=headerMapperName#>.Map(<#=headerEntityName#>);
        }

        /// <summary>
        /// Add <#=headerEntity#> record
        /// </summary>
        /// <param name="model"><#=headerEntity#> model</param>
        /// <returns><#=headerEntity#></returns>
        public <#=headerModelName#> Add(<#=headerModelName#> model)
        {
            CheckRights(<#=headerEntityName#>, SecurityType.Add);

            <#=headerMapperName#>.Map(model, <#=headerEntityName#>);
            <#=headerEntityName#>.Insert();
            
            return <#=headerMapperName#>.Map(<#=headerEntityName#>);
        }

        /// <summary>
        /// Delete <#=headerEntity#> record
        /// </summary>
        /// <param name="filter">filter for deleting a record</param>
        /// <returns></returns>
        public <#=headerModelName#> Delete(Expression<Func<<#=headerModelName#>, Boolean>> filter)
        {
            CheckRights(<#=headerEntityName#>, SecurityType.Delete);
            if (Search(<#=headerEntityName#>, filter))
            {
                <#=headerEntityName#>.Delete();
            }
            else
            {
                throw ExceptionHelper.RowNotFoundException(CommonResx.DeleteFailedNoRecordMessage);
            }
            return <#=headerMapperName#>.Map(<#=headerEntityName#>);
        }

        #endregion

        #region Export/Import

        /// <summary>
        /// Get export or import business entity property
        /// </summary>
        /// <param name="option">export/import option, default to null</param>
        /// <param name="isExport">true if for export, default to false</param>
        /// <returns>business entity property</returns>
        public override BusinessEntityProperty GetExportImportBusinessEntityProperty(string option = null, bool isExport = false)
        {
<#
            // create all business entity properties
            foreach (var node in settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity"))
            {
                var viewID = node.Attribute("view").Value;
                var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == viewID).First().Properties[BusinessView.ModelName];

                WriteLine(String.Format("{0}var {1} = new BusinessEntityProperty({2}.EntityName, ViewKeyType.SystemGenerated /* FIXME ViewKeyType.UserSpecified */);", new string(' ', 12), rotoId2EntityVarName[viewID], modelName));
            }

            WriteLine("");

            // for each parent entity, add all its children
            foreach (var node in settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity"))
            {
                var parentViewID = node.Attribute("view").Value;

                foreach (var childEntity in node.Elements().Where(e => e.Name == "entity"))
                {
                    var childViewID = childEntity.Attribute("view").Value;
        
                    WriteLine(String.Format("{0}{1}.AddDetail({2});", new string(' ', 12), rotoId2EntityVarName[parentViewID], rotoId2EntityVarName[childViewID]));
                }
            }

            WriteLine("");
            WriteLine(String.Format("{0}return {1};", new string(' ', 12), rotoId2EntityVarName[settings.HeaderNode.Attribute("view").Value]));
#>
        }

        /// <summary>
        /// Get import types, i.e., insert, update, insert/update, etc.
        /// We only allow insert operation for batch type transactions.
        /// </summary>
        /// <param name="option">import option, default to null</param>
        /// <returns>a list of import types</returns>
        public override IEnumerable<ImportType> GetImportTypes(string option = null)
        {
            return new List<ImportType> { ImportType.Insert };
        }

        #endregion
    }
}

<#+
        void ComposeChildren(XElement node, Dictionary<string, string> rotoId2EntityVarName)
        {
            var viewID = node.Attribute("view").Value;

            WriteLine(String.Format("{0}_{1}Entity.Compose(new [] {{", new string(' ', 12), rotoId2EntityVarName[viewID]));

            bool bFirst = true;

            var compositions = node.Elements().Where(e => e.Name == "compositions").Descendants();

            foreach (var _node in compositions)
            {
                if (!bFirst)
                    WriteLine(",");

                viewID = _node.Attribute("view").Value;

                if (rotoId2EntityVarName.ContainsKey(viewID) && _node.Attribute("include").Value == "True")
                {
                    Write(String.Format("{0}_{1}Entity.View", new string(' ', 16), rotoId2EntityVarName[viewID]));
                }
                else
                    Write(String.Format("{0}{1}.View", new string(' ', 16), "null"));
                    
                bFirst = false;
            }

            WriteLine("});");

            // extra line
            WriteLine("");
        }

        void ComposeAllViews(XElement node, Dictionary<string, string> rotoId2EntityVarName)
        {
            ComposeChildren(node, rotoId2EntityVarName);
            
            foreach (var _node in node.Elements().Where(e => e.Name == "entity"))
            {
                ComposeAllViews(_node, rotoId2EntityVarName);
            }
        }
#>

