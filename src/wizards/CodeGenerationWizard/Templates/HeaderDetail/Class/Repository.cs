// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Templates.HeaderDetail.Class
{
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Repository : RepositoryBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* The MIT License (MIT) */ 
            
            #line default
            #line hidden
            
            #line 2 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* Copyright (c) 1994-2017 The Sage Group plc or its licensors.  All rights reserved. */ 
            
            #line default
            #line hidden
            
            #line 3 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* */ 
            
            #line default
            #line hidden
            
            #line 4 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ 
            
            #line default
            #line hidden
            
            #line 5 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* this software and associated documentation files (the "Software"), to deal in */ 
            
            #line default
            #line hidden
            
            #line 6 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* the Software without restriction, including without limitation the rights to use, */ 
            
            #line default
            #line hidden
            
            #line 7 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ 
            
            #line default
            #line hidden
            
            #line 8 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* Software, and to permit persons to whom the Software is furnished to do so, */ 
            
            #line default
            #line hidden
            
            #line 9 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* subject to the following conditions: */ 
            
            #line default
            #line hidden
            
            #line 10 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* */ 
            
            #line default
            #line hidden
            
            #line 11 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* The above copyright notice and this permission notice shall be included in all */ 
            
            #line default
            #line hidden
            
            #line 12 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* copies or substantial portions of the Software. */ 
            
            #line default
            #line hidden
            
            #line 13 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* */ 
            
            #line default
            #line hidden
            
            #line 14 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ 
            
            #line default
            #line hidden
            
            #line 15 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ 
            
            #line default
            #line hidden
            
            #line 16 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ 
            
            #line default
            #line hidden
            
            #line 17 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ 
            
            #line default
            #line hidden
            
            #line 18 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ 
            
            #line default
            #line hidden
            
            #line 19 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ 
            
            #line default
            #line hidden
            
            #line 26 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var containerName = settings.EntitiesContainerName;
    var headerModelName = settings.Entities.Where(e => e.Properties["ViewId"] == settings.HeaderNode.Attribute("view").Value).First().Properties[BusinessView.ModelName];

            
            #line default
            #line hidden
            this.Write("// ");
            
            #line 34 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(copyright));
            
            #line default
            #line hidden
            this.Write(@"

#region Namespace

using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Base;
using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Entity;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Utilities;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums.ExportImport;
using Sage.CA.SBS.ERP.Sage300.Common.Models.ExportImport;
using ");
            
            #line 49 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 49 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".BusinessRepository.Mappers;\r\nusing ");
            
            #line 50 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 50 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".Interfaces.BusinessRepository;\r\nusing ");
            
            #line 51 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 51 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".Models;\r\nusing Sage.CA.SBS.ERP.Sage300.Common.Exceptions;\r\nusing Sage.CA.SBS.ERP" +
                    ".Sage300.Common.Resources;\r\n\r\n#endregion\r\n\r\nnamespace ");
            
            #line 57 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(companyNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 57 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(".BusinessRepository\r\n{\r\n    /// <summary>\r\n    /// Class ");
            
            #line 60 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(containerName));
            
            #line default
            #line hidden
            this.Write(" Repository\r\n    /// </summary>\r\n    public class ");
            
            #line 62 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(containerName));
            
            #line default
            #line hidden
            this.Write("Repository : BaseHeaderDetailRepository, I");
            
            #line 62 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(containerName));
            
            #line default
            #line hidden
            this.Write("Repository\r\n    {\r\n        #region Private Variables\r\n\r\n");
            
            #line 66 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

        var xmlEntities = settings.XmlEntities;
        var rotoId2EntityName = new Dictionary<string, string>();
        var rotoId2EntityVarName = new Dictionary<string, string>();

        foreach (var ent in xmlEntities.Root.Descendants().Where(e => e.Name == "entity"))
        {
            var entityName = ent.Attribute("entity").Value;
            var viewID = ent.Attribute("view").Value;
            rotoId2EntityName[viewID] = entityName;
            rotoId2EntityVarName[viewID] = entityName.ToLower().Substring(0, 1) + entityName.Substring(1);
        }

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 80 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 // define business entities  
            
            #line default
            #line hidden
            
            #line 81 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 foreach(KeyValuePair<string, string> entry in rotoId2EntityVarName)
    {
        var entityVariableName = "_" + entry.Value + "Entity";

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Business Entity - ");
            
            #line 86 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Key));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        private IBusinessEntity ");
            
            #line 88 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityVariableName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 90 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

}

            
            #line default
            #line hidden
            
            #line 93 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 // define business entity mappers 
            
            #line default
            #line hidden
            
            #line 94 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 foreach(KeyValuePair<string, string> entry in rotoId2EntityVarName)
    {
        if (settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity" && e.Attribute("view").Value == entry.Key).Count() == 0)
        {
            continue;
        }

        var entityMapperVariableName = "_" + entry.Value + "Mapper";
        var entityMapperVariableType = rotoId2EntityName[entry.Key] + "Mapper";
        var entityName = rotoId2EntityName[entry.Key];
        var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == entry.Key).First().Properties[BusinessView.ModelName];


            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Business Entity Mapper - ");
            
            #line 108 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Key));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n        private readonly ");
            
            #line 110 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityMapperVariableType));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 110 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelName));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 110 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entityMapperVariableName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 112 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n\r\n        #region Constructors\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Sets Context and DBLink\r\n        /// </summary>\r\n        /// <param na" +
                    "me=\"context\">Context</param>\r\n        public ");
            
            #line 124 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(containerName));
            
            #line default
            #line hidden
            this.Write("Repository(Context context):base(context)\r\n        {\r\n");
            
            #line 126 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
 
            foreach(KeyValuePair<string, string> entry in rotoId2EntityVarName)
            {
                    // skip an entity that is not part of the header-detail tree
                    if (settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity" && e.Attribute("view").Value == entry.Key).Count() == 0)
                    {
                        continue;
                    }

                    var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == entry.Key).First().Properties[BusinessView.ModelName];

                    WriteLine(String.Format("{0}_{1}Mapper = new {2}Mapper<{3}>(context);", new string(' ', 12), entry.Value, rotoId2EntityName[entry.Key], modelName));
            }

            
            #line default
            #line hidden
            this.Write(@"        
            CreateBusinessEntities();
        }

        #endregion

    
        #region Protected/public methods

        /// <summary>
        /// Additional Access Check for Export and Import
        /// </summary>
        /// <returns>User Access</returns>
        public UserAccess GetAccessRights()
        {
");
            
            #line 155 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

            var headerEntityName = String.Format("_{0}Entity", rotoId2EntityVarName[settings.HeaderNode.Attribute("view").Value]);

            
            #line default
            #line hidden
            this.Write("\r\n            var userAccess = base.GetAccessRights(");
            
            #line 159 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n            if (SecurityCheck(Security.");
            
            #line 160 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write("Import))\r\n            {\r\n                userAccess.SecurityType |= SecurityType." +
                    "Import;\r\n            }\r\n            if (SecurityCheck(Security.");
            
            #line 164 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(moduleId));
            
            #line default
            #line hidden
            this.Write(@"Export))
            {
                userAccess.SecurityType |= SecurityType.Export;
            }
            return userAccess;
        }

         /// <summary>
        /// Open and compose business entities
        /// </summary>
        protected override void CreateBusinessEntities()
        {
");
            
            #line 176 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

           // open all the entities
            foreach (var ent in xmlEntities.Root.Descendants().Where(e => e.Name == "entity"))
            {
                var viewID = ent.Attribute("view").Value;
                var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == viewID).First().Properties[BusinessView.ModelName];

                WriteLine(String.Format("{0}_{1}Entity = OpenEntity({2}.EntityName, true);", new string(' ', 12), rotoId2EntityVarName[viewID], modelName));
            }

            WriteLine("");

            ComposeAllViews(settings.HeaderNode, rotoId2EntityVarName);

            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 191 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

    var headerEntity = rotoId2EntityName[settings.HeaderNode.Attribute("view").Value];


            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// Get ");
            
            #line 197 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write(" based on the primary key\r\n        /// </summary>\r\n        /// <typeparam name=\"T" +
                    "Key\">data type of the primary key</typeparam>\r\n        /// <param name=\"id\">key " +
                    "value</param>\r\n        /// <returns>");
            
            #line 201 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write("</returns>\r\n        public ");
            
            #line 202 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(" GetById<TKey>(TKey id)\r\n        {\r\n");
            
            #line 204 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"


var headerMapperName = String.Format("_{0}Mapper", rotoId2EntityVarName[settings.HeaderNode.Attribute("view").Value]);


            
            #line default
            #line hidden
            this.Write("            CheckRights(");
            
            #line 209 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(", SecurityType.Inquire);\r\n\r\n            var fields = GetKeyField(");
            
            #line 211 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n            ");
            
            #line 213 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(".SetValue(fields[0].ID, id);\r\n\r\n            return !");
            
            #line 215 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(".Read(false) ? null : ");
            
            #line 215 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerMapperName));
            
            #line default
            #line hidden
            this.Write(".Map(");
            
            #line 215 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n       /// <summary>\r\n        /// Save ");
            
            #line 219 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write(" record\r\n        /// </summary>\r\n        /// <param name=\"model\">");
            
            #line 221 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write(" model</param>\r\n        /// <returns>");
            
            #line 222 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write("</returns>\r\n        public ");
            
            #line 223 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(" Save(");
            
            #line 223 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n            CheckRights(");
            
            #line 225 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(", SecurityType.Modify);\r\n\r\n            ");
            
            #line 227 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerMapperName));
            
            #line default
            #line hidden
            this.Write(".Map(model, ");
            
            #line 227 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 228 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(".Update();\r\n            \r\n            return ");
            
            #line 230 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerMapperName));
            
            #line default
            #line hidden
            this.Write(".Map(");
            
            #line 230 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Add ");
            
            #line 234 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write(" record\r\n        /// </summary>\r\n        /// <param name=\"model\">");
            
            #line 236 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write(" model</param>\r\n        /// <returns>");
            
            #line 237 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write("</returns>\r\n        public ");
            
            #line 238 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(" Add(");
            
            #line 238 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(" model)\r\n        {\r\n            CheckRights(");
            
            #line 240 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(", SecurityType.Add);\r\n\r\n            ");
            
            #line 242 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerMapperName));
            
            #line default
            #line hidden
            this.Write(".Map(model, ");
            
            #line 242 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 243 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(".Insert();\r\n            \r\n            return ");
            
            #line 245 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerMapperName));
            
            #line default
            #line hidden
            this.Write(".Map(");
            
            #line 245 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Delete ");
            
            #line 249 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntity));
            
            #line default
            #line hidden
            this.Write(" record\r\n        /// </summary>\r\n        /// <param name=\"filter\">filter for dele" +
                    "ting a record</param>\r\n        /// <returns></returns>\r\n        public ");
            
            #line 253 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(" Delete(Expression<Func<");
            
            #line 253 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerModelName));
            
            #line default
            #line hidden
            this.Write(", Boolean>> filter)\r\n        {\r\n            CheckRights(");
            
            #line 255 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(", SecurityType.Delete);\r\n            if (Search(");
            
            #line 256 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(", filter))\r\n            {\r\n                ");
            
            #line 258 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(".Delete();\r\n            }\r\n            else\r\n            {\r\n                throw" +
                    " ExceptionHelper.RowNotFoundException(CommonResx.DeleteFailedNoRecordMessage);\r\n" +
                    "            }\r\n            return ");
            
            #line 264 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerMapperName));
            
            #line default
            #line hidden
            this.Write(".Map(");
            
            #line 264 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(headerEntityName));
            
            #line default
            #line hidden
            this.Write(@");
        }

        #endregion

        #region Export/Import

        /// <summary>
        /// Get export or import business entity property
        /// </summary>
        /// <param name=""option"">export/import option, default to null</param>
        /// <param name=""isExport"">true if for export, default to false</param>
        /// <returns>business entity property</returns>
        public override BusinessEntityProperty GetExportImportBusinessEntityProperty(string option = null, bool isExport = false)
        {
");
            
            #line 279 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

            // create all business entity properties
            foreach (var node in settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity"))
            {
                var viewID = node.Attribute("view").Value;
                var modelName = settings.Entities.Where(e => e.Properties["ViewId"] == viewID).First().Properties[BusinessView.ModelName];

                WriteLine(String.Format("{0}var {1} = new BusinessEntityProperty({2}.EntityName, ViewKeyType.SystemGenerated /* FIXME ViewKeyType.UserSpecified */);", new string(' ', 12), rotoId2EntityVarName[viewID], modelName));
            }

            WriteLine("");

            // for each parent entity, add all its children
            foreach (var node in settings.HeaderNode.DescendantsAndSelf().Where(e => e.Name == "entity"))
            {
                var parentViewID = node.Attribute("view").Value;

                foreach (var childEntity in node.Elements().Where(e => e.Name == "entity"))
                {
                    var childViewID = childEntity.Attribute("view").Value;
        
                    WriteLine(String.Format("{0}{1}.AddDetail({2});", new string(' ', 12), rotoId2EntityVarName[parentViewID], rotoId2EntityVarName[childViewID]));
                }
            }

            WriteLine("");
            WriteLine(String.Format("{0}return {1};", new string(' ', 12), rotoId2EntityVarName[settings.HeaderNode.Attribute("view").Value]));

            
            #line default
            #line hidden
            this.Write(@"        }

        /// <summary>
        /// Get import types, i.e., insert, update, insert/update, etc.
        /// We only allow insert operation for batch type transactions.
        /// </summary>
        /// <param name=""option"">import option, default to null</param>
        /// <returns>a list of import types</returns>
        public override IEnumerable<ImportType> GetImportTypes(string option = null)
        {
            return new List<ImportType> { ImportType.Insert };
        }

        #endregion
    }
}

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 324 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

        void ComposeChildren(XElement node, Dictionary<string, string> rotoId2EntityVarName)
        {
            var viewID = node.Attribute("view").Value;

            WriteLine(String.Format("{0}_{1}Entity.Compose(new [] {{", new string(' ', 12), rotoId2EntityVarName[viewID]));

            bool bFirst = true;

            var compositions = node.Elements().Where(e => e.Name == "compositions").Descendants();

            foreach (var _node in compositions)
            {
                if (!bFirst)
                    WriteLine(",");

                viewID = _node.Attribute("view").Value;

                if (rotoId2EntityVarName.ContainsKey(viewID) && _node.Attribute("include").Value == "True")
                {
                    Write(String.Format("{0}_{1}Entity.View", new string(' ', 16), rotoId2EntityVarName[viewID]));
                }
                else
                    Write(String.Format("{0}{1}.View", new string(' ', 16), "null"));
                    
                bFirst = false;
            }

            WriteLine("});");

            // extra line
            WriteLine("");
        }

        void ComposeAllViews(XElement node, Dictionary<string, string> rotoId2EntityVarName)
        {
            ComposeChildren(node, rotoId2EntityVarName);
            
            foreach (var _node in node.Elements().Where(e => e.Name == "entity"))
            {
                ComposeAllViews(_node, rotoId2EntityVarName);
            }
        }

        
        #line default
        #line hidden
        
        #line 1 "C:\CNA2\Sage300-SDK\src\wizards\CodeGenerationWizard\Templates\HeaderDetail\Class\Repository.tt"

private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView _viewField;

/// <summary>
/// Access the view parameter of the template.
/// </summary>
private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView view
{
    get
    {
        return this._viewField;
    }
}

private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings _settingsField;

/// <summary>
/// Access the settings parameter of the template.
/// </summary>
private global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings settings
{
    get
    {
        return this._settingsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool viewValueAcquired = false;
if (this.Session.ContainsKey("view"))
{
    this._viewField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView)(this.Session["view"]));
    viewValueAcquired = true;
}
if ((viewValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("view");
    if ((data != null))
    {
        this._viewField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView)(data));
    }
}
bool settingsValueAcquired = false;
if (this.Session.ContainsKey("settings"))
{
    this._settingsField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings)(this.Session["settings"]));
    settingsValueAcquired = true;
}
if ((settingsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("settings");
    if ((data != null))
    {
        this._settingsField = ((global::Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class RepositoryBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
