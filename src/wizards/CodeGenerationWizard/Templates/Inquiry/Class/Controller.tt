<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2016 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.ModelName];
    var entityName = view.Properties[BusinessView.EntityName];

    var webModuleNamespace = (settings.DoesAreasExist ? (settings.WebProjectIncludesModule ? moduleId + "." : string.Empty) + 
	"Web.Areas." + moduleId : moduleId + ".Web");

#>
// <#=copyright#>

#region Namespace

using System;
using System.Linq.Expressions;
using Microsoft.Practices.Unity;
using System.Web.Mvc;
using Sage.CA.SBS.ERP.Sage300.Common.Exceptions;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using Sage.CA.SBS.ERP.Sage300.Common.Resources;
using Sage.CA.SBS.ERP.Sage300.Common.Web;
using System.Collections.Generic;
using Filter=Sage.CA.SBS.ERP.Sage300.Common.Models.Filter;
using <#=companyNamespace#>.<#=moduleId#>.Models;
using <#=companyNamespace#>.<#=moduleId#>.Resources.Forms;
using <#=companyNamespace#>.<#=webModuleNamespace#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers
{
    /// <summary>
    /// Public controller for <#=entityName#>
    /// </summary>
    /// <typeparam name="T"><#=modelName#></typeparam>
    public class <#=entityName#>Controller<T> : MultitenantControllerBase<<#=entityName#>ViewModel<T>>
        where T : <#=modelName#>, new()
    {
        #region Public variables

        /// <summary>
        /// Gets or sets the internal controller
        /// </summary>
        public <#=entityName#>ControllerInternal<T> ControllerInternal { get; set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="container">Unity Container</param>
        public <#=entityName#>Controller(IUnityContainer container)
            : base(container, "<#=moduleId#><#=entityName#>")
        {
        }

        #endregion

        #region Initialize MultitenantControllerBase

        /// <summary>
        /// Override Initialize method
        /// </summary>
        /// <param name="requestContext">Request Context</param>
        protected override void Initialize(System.Web.Routing.RequestContext requestContext)
        {
            base.Initialize(requestContext);
            ControllerInternal = new <#=entityName#>ControllerInternal<T>(Context);
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Load screen
        /// </summary>
        /// <returns>JSON object for <#=modelName#></returns>
        public virtual ActionResult Index()
        {
            <#=entityName#>ViewModel<T>  viewModel;

            try
            {
                viewModel = ControllerInternal.Get();
            }
            catch (BusinessException businessException)
            {
                // TODO: Replace string.Empty with Resx string (i.e. <#=entityName#>sResx.SomeString)
                // TODO: Delete TODO statements when complete
                return JsonNet(BuildErrorModelBase(CommonResx.GetFailedMessage, businessException, string.Empty));
            }

            return View(viewModel);
        }

        /// <summary>
        /// Get <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <param name="pageNumber">Page Number </param>
        /// <param name="pageSize">Page Size </param>
        /// <param name="filters">Filter Expression </param>
        /// <returns>JSON object for <#=modelName#></returns>
        [HttpPost]
        public virtual JsonNetResult Get(T model, int pageNumber, int pageSize,  Expression<Func<T, bool>> filters)
        {
            try
            {
                return JsonNet(ControllerInternal.Get(model, pageNumber, pageSize, filters));
            }
            catch (BusinessException businessException)
            {
                // TODO: Replace string.Empty with Resx string (i.e. <#=entityName#>sResx.SomeString)
                // TODO: Delete TODO statements when complete
                return JsonNet(BuildErrorModelBase(CommonResx.GetFailedMessage, businessException, string.Empty));
            }
        }

        #endregion
    }
}
