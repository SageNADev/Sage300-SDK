@model Sage.CA.SBS.ERP.Sage300.Core.Web.Models.GridConfigViewModel
@using System.Reflection
@using Microsoft.Ajax.Utilities
@using Sage.CA.SBS.ERP.Sage300.Common.Resources
@using Sage.CA.SBS.ERP.Sage300.GL.Web.Constants
@using Sage.CA.SBS.ERP.Sage300.Common.Web.AreaConstants
@using Sage.CA.SBS.ERP.Sage300.Common.Models.Attributes
@using Sage.CA.SBS.ERP.Sage300.Common.Models
@using System.Linq;
@using System.Text;
@using System.Dynamic;
@using DA = System.ComponentModel.DataAnnotations

@functions{
    /// <summary>
    /// Return array of properties that has GridInfo attributes and with the matching Identity if Model has it defined
    /// </summary>
    /// <returns></returns>
    IEnumerable<PropertyInfo> GetPropertyHelper()
    {
        if (Model.TargetIdentity.HasValue)
        {
            return Model.GridType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance).
                   Where(p => p.GetCustomAttributes<GridInfo>(false).Any(a => ((GridInfo)a).Identity == Model.TargetIdentity.Value)).
                   OrderBy(p => p.GetCustomAttributes<GridInfo>(false).FirstOrDefault(a => a.Identity == Model.TargetIdentity.Value).Sequence);
        }
        else
        {
             return Model.GridType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance).
                    Where(p => p.GetCustomAttributes<GridInfo>(false).Any()).
                    OrderBy(p => p.GetCustomAttributes<GridInfo>(false).FirstOrDefault().Sequence);
        }
    }
}

<script type="text/javascript">
    @if(!string.IsNullOrEmpty(Model.GridPreferenceKey))
    {
        @Html.Raw(string.Format("var {0}GridPreferences = '{1}';", Model.GridType.Name, Html.GridPreference(Model.GridPreferenceKey)))
    }

    @* Create base Grid configuration object *@
    @Html.Raw(string.Format(@"var {0} = {{
        autoBind: {5},
        pageSize: {3},
        pageable: {{
            input: true,
            numeric: false
        }},
        scrollable: true,
        navigatable: true, //enable grid cell tabbing for safari browser
        resizable: true,
        selectable: true,
        reorderable: {4},
        edit: function (e) {{
            this.select(e.container.closest('tr'));
        }},
        isServerPaging: true,
        // Parameter will be null during Get and will contain the data that needs to be passed to the server on create
        param: null,
        // Column Reorder
        columnReorder: function (e) {{
            GridPreferencesHelper.saveColumnOrder(e, '#{1}', '{2}');
        }},
        columns: [
        ],
        schema: {{
                model: {{
                    fields: {{
                    }}
                }}
        }},
        editable: {6},
        editorEvents: {{}},
        initGrid: function () {{
            {0}.pageUrl = sg.utls.url.buildUrl('{7}', '{8}', '{9}');
        }},
        getGridInstance: function () {{
            return $('#{1}').data('kendoGrid');
        }}
    }};", Model.GridConfigName, Model.GridId, Model.GridPreferenceKey, GridInfoConstants.PageSize, 
        GridInfoConstants.ColReorderability.ToString().ToLowerInvariant(),
        Model.AutoBind.ToString().ToLowerInvariant(), Model.GridEditableMode.ToString().ToLowerInvariant(),
        Model.PageUrl != null && Model.PageUrl.Length == 3? Model.PageUrl[0]: "",
        Model.PageUrl != null && Model.PageUrl.Length == 3? Model.PageUrl[1]: "",
        Model.PageUrl != null && Model.PageUrl.Length == 3? Model.PageUrl[2]: ""))

    @{
        if (Model.HasDeleteColumn)
        {
            var deleteColumn = string.Format(@"{{
                ""field"": ""Delete"",
                ""attributes"": {{ ""class"": ""first-cell  newcontrol"", sg_Customizable: false }},
                ""headerAttributes"": {{ ""class"": ""first-cell newcontrol"" }},
                ""template"": ""<span class='icon checkBox'><input type='checkbox' class='selectChk' /></span>"",
                ""headerTemplate"": ""<span class='icon checkBox'><input type='checkbox' id='{0}' /></span>"",
                ""reorderable"": false,
                ""editor"": function (container) {{
                    var grid = $('#{1}').data(""kendoGrid"");
                    sg.utls.kndoUI.nonEditable(grid, container);
                }}
            }}", Model.SelectAllCheckboxId, Model.GridId);
            
            @Html.Raw(string.Format("{0}.columns.push({1});\n", Model.GridConfigName, deleteColumn));
        }
    }

    @{
        // get a list of properites that have the GridInfo attributes and sort them base on Sequcne value
       var gridProps = GetPropertyHelper();
        
        //loop through each property and generate the JS portion for Grid configuration
        foreach (var propertyInfo in gridProps)
        {
            var attributes = (GridInfo[])Attribute.GetCustomAttributes(propertyInfo, typeof(GridInfo));

            GridInfo attr = null;

            if (attributes.Length > 1 && Model.TargetIdentity.HasValue)
            {
                // multiple instance of GridInfo defined
                attr = (new List<GridInfo>(attributes)).FirstOrDefault<GridInfo>(x => x.Identity == Model.TargetIdentity.Value);
                //attr = (GridInfo)attributes[0];
            }
            else
            {
                attr = (GridInfo) attributes[0];
            }
            
            //var attr = (GridInfo) Attribute.GetCustomAttribute(propertyInfo, typeof (GridInfo));
            var stringLengthAttr = (DA.StringLengthAttribute) Attribute.GetCustomAttribute(propertyInfo, typeof (DA.StringLengthAttribute));

            var colConfigStr = new StringBuilder("{");
            colConfigStr.AppendLine(string.Format("\"field\": \"{0}\",", attr.Field ?? propertyInfo.Name));
            colConfigStr.AppendLine(string.Format("\"title\": \"{0}\",", attr.Title ?? propertyInfo.Name));
            colConfigStr.AppendLine(string.Format("\"attributes\": {0},", attr.FormattedStyle));
            colConfigStr.AppendLine(string.Format("\"headerAttributes\": {0},", attr.FormattedStyle));

            if (!string.IsNullOrEmpty(attr.Template))
            {
                colConfigStr.AppendLine(string.Format("\"template\": {0},", attr.Template));
            }

            colConfigStr.AppendLine(string.Format("\"hidden\": {0},", attr.Hidden.ToString().ToLowerInvariant()));

            var propertyName = attr.Field ?? propertyInfo.Name;

            if (attr.Editable)
            {
                var preEditEventStr = string.Format("{0}.editorEvents.{1}.PreEditEvent", Model.GridConfigName, propertyName);
                var postEditEventStr = string.Format("{0}.editorEvents.{1}.PostEditEvent", Model.GridConfigName, propertyName);

                colConfigStr.AppendLine("\"editor\": function (container, options) {");
                
                colConfigStr.AppendFormat("if(!{0} || {0}(container, options)){{\n", preEditEventStr);

                AddHtmlString(Model, attr, propertyName, propertyInfo, colConfigStr);

                if (stringLengthAttr != null)
                {
                    var prefix = Model.Controls.IsUsingSameModelType ? string.Empty : "Data_";
                    colConfigStr.AppendLine(string.Format("$('#{0}').attr('maxlength', {1});", prefix + propertyName, stringLengthAttr.MaximumLength));
                }

                colConfigStr.AppendLine("}");

                colConfigStr.AppendFormat("if({0}){{\n", postEditEventStr);
                colConfigStr.AppendFormat("{0}(container, options);\n", postEditEventStr);
                colConfigStr.AppendLine("}");

                colConfigStr.AppendLine("}");
            }
            else
            {
                colConfigStr.AppendLine("\"editor\": function (container, options) {");

                colConfigStr.AppendLine(string.Format("sg.utls.kndoUI.nonEditable($('#{0}').data(\"kendoGrid\"), container);", Model.GridId));

                colConfigStr.AppendLine("}");
            }

            colConfigStr.AppendLine("}");

            @Html.Raw(Model.GridConfigName + ".columns.push(" + colConfigStr.ToString() + ");\n");

            if (attr.Editable)
            {
                @Html.Raw(Model.GridConfigName + string.Format(".editorEvents[\"{0}\"] = {{\"PreEditEvent\":null}} ;\n", propertyName));
                @Html.Raw(Model.GridConfigName + string.Format(".editorEvents[\"{0}\"] = {{\"PostEditEvent\":null}} ;\n", propertyName));
                @Html.Raw(Model.GridConfigName + string.Format(".editorEvents[\"{0}\"] = {{\"OnChangeEvent\":null}} ;\n", propertyName));
                @Html.Raw(Model.GridConfigName + string.Format(".editorEvents[\"{0}\"] = {{\"FinderSelect\":null}} ;\n", propertyName));
                @Html.Raw(Model.GridConfigName + string.Format(".editorEvents[\"{0}\"] = {{\"FinderCancel\":null}} ;\n", propertyName));
				@Html.Raw(Model.GridConfigName + string.Format(".editorEvents[\"{0}\"] = {{\"FinderFilter\":null}} ;\n", propertyName));
            }
            @*else
            {
                var fieldString = string.Format("{0}.schema.model.fields[\"{1}\"] = {{ editable: false }};\n", Model.GridConfigName, attr.Field ?? propertyInfo.Name);
                @Html.Raw(fieldString);
            }*@
        }
    }

</script>

@if (!Model.IsSkipGridCreation)
{
    <div class="gridcontrols-group">
        @if (Model.AddButtonVisibility)
        {
            @Html.SageButtonNoName(CommonResx.AddLine, new { @id = Model.AddButtonId, @class = "btn btn-default btn-grid-control btn-add" })
        }

        @if (Model.DeleteButtonVisibility)
        {
            @Html.SageButtonNoName(CommonResx.DeleteLine, new { @id = Model.DeleteButtonId, @class = "btn btn-default btn-grid-control btn-delete" })
        }

        @if (Model.EditButtonVisibility)
        {
            @Html.SageButtonNoName(CommonResx.EditColumns, new { @id = Model.EditButtonId, @class = "btn btn-default btn-grid-control btn-edit-column" })
        }
    </div>
    
    if (Model.GridSize == Sage.CA.SBS.ERP.Sage300.Core.Web.Models.GridSize.Regular)
    {
        <div class="datagrid-group">
            @Html.KoKendoGrid(Model.GridId, Model.GridDataSource, Model.GridKey, Model.GridConfigName, true)
        </div>
    }
    else
    {
        <div class="datagrid-group small">
            @Html.KoKendoGrid(Model.GridId, Model.GridDataSource, Model.GridKey, Model.GridConfigName, true)
        </div>
    }
}

@if (!string.IsNullOrEmpty(Model.GridPreferenceKey))
{ 
    @Html.Partial(Core.GridPreferences)
}

@functions {
    public static void AddHtmlString(Sage.CA.SBS.ERP.Sage300.Core.Web.Models.GridConfigViewModel model, GridInfo gridInfo, string propertyName, 
        PropertyInfo propertyInfo, StringBuilder colConfigStr)
    {
        var prefix = model.Controls.IsUsingSameModelType ? string.Empty : "Data_";
        object editorHtmlProperties = new {
            @class = gridInfo.EditorHtmlClass ?? string.Empty,
            formatTextbox = gridInfo.IsAlphaNumericEditor? "alphaNumeric": string.Empty
        };
        
        if (gridInfo.EditorType == GridEditorEnum.Text)
        {
            if (propertyInfo.PropertyType == typeof(string))
            {
                colConfigStr.AppendLine(
                    string.Format(
                        "$('{0}').appendTo(container);\n",
                        model.Controls.TextBox.ForStringProperty(propertyName, editorHtmlProperties).ToHtmlString()
                    )
                );

                var onChangeEventStr = string.Format("{0}.editorEvents.{1}.OnChangeEvent", model.GridConfigName, propertyName);
                colConfigStr.AppendLine(string.Format("var txtField = $(\"#{0}{1}\");", prefix, propertyName));
                colConfigStr.AppendLine("txtField.bind(\"change\", function (e) {");
                colConfigStr.AppendFormat("   if({0}){{\n", onChangeEventStr);
                colConfigStr.AppendFormat("     {0}(e);\n", onChangeEventStr);
                colConfigStr.AppendLine("   }");
                colConfigStr.AppendLine("});");
            }
        }
        else if (gridInfo.EditorType == GridEditorEnum.Calendar)
        {
            if (propertyInfo.PropertyType == typeof(DateTime))
            {
                colConfigStr.AppendLine(
                    string.Format(
                        "$('{0}').appendTo(container);\n",
                        model.Controls.TextBox.ForDateTimeProperty(propertyName, editorHtmlProperties).ToHtmlString()
                    )
                );
                
                var onChangeEventStr = string.Format("{0}.editorEvents.{1}.OnChangeEvent", model.GridConfigName, propertyName);
                
                colConfigStr.AppendLine(string.Format("sg.utls.kndoUI.datePicker(\"{0}{1}\");", prefix, propertyName));
                colConfigStr.AppendLine(string.Format("var datePicker = $(\"#{0}{1}\").data(\"kendoDatePicker\");", prefix, propertyName));
                colConfigStr.AppendLine("datePicker.bind(\"change\", function (e) {");
                colConfigStr.AppendFormat("   if({0}){{\n", onChangeEventStr);
                colConfigStr.AppendFormat("     {0}(e);\n", onChangeEventStr);
                colConfigStr.AppendLine("   }");
                colConfigStr.AppendLine("});");
                
            }
        }
        else if (gridInfo.EditorType == GridEditorEnum.Finder)
        {
            if (propertyInfo.PropertyType == typeof(string))
            {
                var btnName = string.Format("btn{0}", propertyName);
                
                colConfigStr.AppendLine(
                    string.Format(
                        "$('{0}').appendTo(container);\n",
                        model.Controls.TextBox.ForStringProperty(propertyName, editorHtmlProperties).ToHtmlString() + 
                        model.Controls.Button.ForAllProperty(btnName, new { @id = btnName, @class = "icon btn-search", @tabindex = "-1" }).ToHtmlString()
                    )
                );

                var finderHandlerFormat = "{0}.editorEvents.{1}.{2}";
                
                colConfigStr.AppendLine(
                    string.Format(
                        "sg.finderHelper.setFinder(\"{0}\", \"{1}\", {2}, {3}, \"{4}\", {5}, null, {6});",
                            btnName, 
                            gridInfo.FinderName, 
                            string.Format(finderHandlerFormat, model.GridConfigName, propertyName, "FinderSelect"),
                            string.Format(finderHandlerFormat, model.GridConfigName, propertyName, "FinderCancel"),
                            gridInfo.FinderTitle,
                            string.Format(finderHandlerFormat, model.GridConfigName, propertyName, "FinderFilter"),
                            gridInfo.FinderPostbackNotRequired ? "true" : "false"
                    )
                );
            }
        }
        else if (gridInfo.EditorType == GridEditorEnum.Dropdown)
        {
            var dropdownValue = model.ScreenModel.GetType().GetProperty(gridInfo.DropDownSourceField).GetValue(model.ScreenModel, null) as IEnumerable<CustomSelectList>;

            colConfigStr.AppendLine(
                string.Format(
                    "$('{0}').appendTo(container).kendoDropDownList({{value: options.model.{1}}});",
                    model.Controls.DropDown.ForAllProperty(propertyName, editorHtmlProperties, dropdownValue).ToHtmlString().Replace(System.Environment.NewLine, string.Empty),
                    propertyName
                )
            );

            var onChangeEventStr = string.Format("{0}.editorEvents.{1}.OnChangeEvent", model.GridConfigName, propertyName);

            colConfigStr.AppendLine(string.Format("var dropdownlist = $(\"#{0}\").data(\"kendoDropDownList\");", propertyName));
            colConfigStr.AppendLine("dropdownlist.bind(\"change\", function (e) {");
            colConfigStr.AppendFormat("   if({0}){{\n", onChangeEventStr);
            colConfigStr.AppendFormat("     {0}(e);\n", onChangeEventStr);
            colConfigStr.AppendLine("   }");
            colConfigStr.AppendLine("});");
        }
        else if (gridInfo.EditorType == GridEditorEnum.NumericTextBox)
        {
            string template = string.Join(
                            Environment.NewLine,
                            "var numericField = $('{0}').appendTo(container).kendoNumericTextBox({{",
                            "   format: \"n\" + options.model.{1},",
                            "   spinners: false,",
                            "   step: 0,",
                            "   decimals: options.model.{1}",
                            "}}).data(\"kendoNumericTextBox\");",
                            "sg.utls.kndoUI.restrictDecimals(numericField, options.model.{1}, {2} - options.model.{1});"
                        );
            
            if (propertyInfo.PropertyType == typeof(decimal))
            {
                colConfigStr.AppendLine(
                    string.Format(template,
                        model.Controls.TextBox.ForDecimalProperty(propertyName, editorHtmlProperties).ToHtmlString(),
                        gridInfo.NumericDecimalField,
                        gridInfo.NumericDecimalMaxLength
                    )
                );
            }
            else if (propertyInfo.PropertyType == typeof(decimal?))
            {
                colConfigStr.AppendLine(
                    string.Format(template,
                        model.Controls.TextBox.ForDecimalNullableProperty(propertyName, editorHtmlProperties).ToHtmlString(),
                        gridInfo.NumericDecimalField,
                        gridInfo.NumericDecimalMaxLength
                    )
                );
            }
        }
    }
}

