@* Copyright (c) 2018 Sage Software, Inc.  All rights reserved. *@
@using Sage.CA.SBS.ERP.Sage300.Common.Resources.Portal;
@using Sage.CA.SBS.ERP.Sage300.Common.Resources;
@using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Inquiry;
@using Sage.CA.SBS.ERP.Sage300.Common.Models.Inquiry;
@using Sage.CA.SBS.ERP.Sage300.Common.Utilities.Constants;
@using System.Collections.Generic;
@using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Service.Base
@using System.Linq;
@using Sage.CA.SBS.ERP.Sage300.Core.Logging;

@functions
{
    public static string GetResourceString(string resouceFileName, string resourceName)
    {
        var resourceType = Type.GetType(resouceFileName);
        return (string)resourceType.GetProperty(resourceName).GetGetMethod().Invoke(null, null);
    }

    public static string GetTemplateLocalizedName(string templateName)
    {
        string result = null;

        try
        {
            var template = InquiryQuery.Load(InquiryQueryType.Template, templateName);
            if (template != null && !string.IsNullOrEmpty(template.ResourceType) && !string.IsNullOrEmpty(template.ResourceKey))
            {
                result = GetResourceString(template.ResourceType, template.ResourceKey);
            }
        }
        catch (Exception e)
        {
            Logger.Error(string.Format("Adhoc Inquiry: Problem getting info about template: {0}", templateName), e);
        }

        return result;
    }
}

@{
    var activeApplications = ((ICommonService) ViewBag.CommonService).GetActiveApplications().Where(a => a.IsInstalled);
    
    // get all templates and filter down to only ones that the module is active
    var allActiveTemplates = new Dictionary<string, List<string>>();

    foreach (var moduleTemplates in InquiryQueryManager.GetTemplates())
    {
        if (activeApplications.Select(a => a.AppId).Contains(moduleTemplates.Key))
        {
            allActiveTemplates.Add(moduleTemplates.Key, moduleTemplates.Value);
        }
    }
    
    var stockApplicationIds = new string[]
    {
        Constant.GLAppIdentifier,
        Constant.ARAppIdentifier,
        Constant.APAppIdentifier,
        Constant.ICAppIdentifier,
        Constant.OEAppIdentifier,
        Constant.POAppIdentifier
    };

    var thirdPartyTemplates = allActiveTemplates.Where(t => !stockApplicationIds.Contains(t.Key)).OrderBy(t => t.Key);
}

<div id="viewInquiries" class="side-panel side-panel-shadow view-inquiry" tabindex="-1">
    <div class="side-panel-wrapper">
        <div class="header-container">
            <h1 class="side-panel-header header-inquiry">@HomePageResx.QuickMenu_Inquiries</h1>
            <div class="glyphicon glyphicon-close dismiss" title="@HomePageResx.QuickMenu_Dismiss" id="btnInquiryClose"></div>
        </div>
        <div class="wrapper">
            <div class="form-group">
                <div class="dropdown-group">
                    <label>@InquiryResx.DataSource</label>
                    <select class="medium single-select" id="DataSourceList"></select>
                </div>
            </div>
            <div id="inquiryTabStrip" class="tab-group">
                <ul>
                    <li id="templateTabLabel" class="k-state-active">@InquiryResx.StandQueries</li>
                    <li id="customizedTemplateTabLabel" class="">@InquiryResx.CustomQueries</li>
                </ul>
                <div class="tab-pane" id="templateTab">
                    <ul id="commonTemplateList">
                    </ul>
                </div>
                <div class="tab-pane" id="customizedTemplateTab">
                    <div class="form-group">
                        <div class="ctrl-group ctrl-group-inline">
                            <label>@CommonResx.Show:</label>
                            <div class="child" id="divChkShared">
                                @Html.KoSageCheckBox("ChkPublic", false, new { @sagechecked = "'true'" }, new { @id = "chkPublic" })
                                @Html.SageLabel("lblPublic", InquiryResx.Public, new { @for = "ChkPublic" })
                            </div>
                            <div class="child" id="divChkPersonal">
                                @Html.KoSageCheckBox("ChkPrivate", false, new { @sagechecked = "'true'" }, new { @id = "chkPrivate" })
                                @Html.SageLabel("lblPrivate", InquiryResx.Private, new { @for = "ChkPrivate" })
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div id="message-info" style="display: none;">
                        <div class="message-control multiWarn-msg">
                            <div class="title">
                                <span class="icon multiWarn-icon"></span>
                            </div>
                            <div class="msg-content">
                                @InquiryResx.TabMessage
                            </div>
                        </div>
                    </div>
                    <ul id="customizedTemplateList"></ul>
                </div>
            </div>
        </div>
    </div>
</div>

