<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2025 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var resxName = view.Properties[BusinessView.Constants.ResxName];
    var modelName = view.Properties[BusinessView.Constants.ModelName];
    var entityName = view.Properties[BusinessView.Constants.EntityName];
    var containerName = entityName;
    var webModuleNamespace = (settings.DoesAreasExist ? (settings.WebProjectIncludesModule ? moduleId + "." : string.Empty) + 
	"Web.Areas." + moduleId : moduleId + ".Web");

    // Specific payroll logic since CP and UP are now dynamically assigned
    var entityContext = (moduleId == "PR");

#>

// <#=copyright#>

#region Namespace

using System;
using System.Linq;
using Unity;
using System.Linq.Expressions;
using System.Collections.Generic;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Resources;
using Sage.CA.SBS.ERP.Sage300.Common.Web.Utilities;
using Sage.CA.SBS.ERP.Sage300.Common.Web.Controllers.ExportImport;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Base;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.BusinessRepository;
using <#=companyNamespace#>.<#=moduleId#>.Models;
using <#=companyNamespace#>.<#=moduleId#>.Resources.Forms;
using <#=companyNamespace#>.<#=webModuleNamespace#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers
{
    /// <summary>
    /// <#=containerName#> Internal Controller
    /// </summary>
    public class <#=containerName#>ControllerInternal : ImportExportControllerInternal<I<#=containerName#>Repository>
    {
        #region Private variables
         
        /// <summary>
        /// Variable for storing context.
        /// </summary>
        private readonly Context _context;

        private I<#=containerName#>Repository _repository
        {
            get {
                return _context.Container.Resolve<I<#=containerName#>Repository>(Utilities.ContextParameter(_context));
            }
        }

        #endregion

        #region Constructor

        /// <summary>
        /// New instance of <see cref="<#=containerName#>ControllerInternal"/>
        /// </summary>
        /// <param name="context">Context</param>
        public <#=containerName#>ControllerInternal(Context context)
            : base(context)
        {
            _context = context;
        }

        #endregion

		#region Internal methods

        /// <summary>
        /// Create a <#=modelName#>
        /// </summary>
        /// <returns>view model for  <#=modelName#></returns>
        internal <#=containerName#>ViewModel Create()
        {
	        var viewModel = GetViewModel(new <#=modelName#>(), null);
            viewModel.UserAccess = GetAccessRights();

            return viewModel;
        }

        /// <summary>
        /// commit the revision list to database
        /// </summary>
        internal <#=containerName#>ViewModel Post()
        {
            _repository.Post();

			var userMessage = new UserMessage(null, CommonResx.SaveSuccessMessage);
            return GetViewModel(null, userMessage);
        }
		
        #endregion

		#region Private methods

        /// <summary>
        /// Generic routine to return a view model for <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <param name="userMessage">User Message for <#=modelName#></param>
        /// <returns>View Model for <#=modelName#></returns>
        private <#=containerName#>ViewModel GetViewModel(<#=modelName#> model, UserMessage userMessage)
        {
            return new <#=containerName#>ViewModel
            {
                Data = model,
<#
            if (entityContext)
            {
#>
                UserMessage = userMessage,
                PayrollType = Context.ScreenContext.EntityContext
<#
            }
            else
            {
#>
                UserMessage = userMessage
<#
             }
#>
            };
        }

        #endregion

	}
}