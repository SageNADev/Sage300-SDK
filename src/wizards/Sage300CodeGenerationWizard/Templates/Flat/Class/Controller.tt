<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2023 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var resxName = view.Properties[BusinessView.Constants.ResxName];
    var modelName = view.Properties[BusinessView.Constants.ModelName];
    var entityName = view.Properties[BusinessView.Constants.EntityName];
    var keyFieldName = view.Keys.FirstOrDefault();

    var webModuleNamespace = (settings.DoesAreasExist ? (settings.WebProjectIncludesModule ? moduleId + "." : string.Empty) + 
	"Web.Areas." + moduleId : moduleId + ".Web");

    var enumsCount = view.Enums.Count;

    // Specific payroll logic since CP and UP are now dynamically assigned
    var entityContext = (moduleId == "PR");
#>
// <#=copyright#>

#region Namespace

using Unity;
using System.Web.Mvc;
using Sage.CA.SBS.ERP.Sage300.Common.Exceptions;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
<#
	if (entityContext)
	{
#>
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums.Payroll;
<#
	}
#>
using Sage.CA.SBS.ERP.Sage300.Common.Resources;
using Sage.CA.SBS.ERP.Sage300.Common.Web;
using Newtonsoft.Json;
using <#=companyNamespace#>.<#=moduleId#>.Models;
<#
	if (enumsCount > 0)
	{
#>
using <#=companyNamespace#>.<#=moduleId#>.Models.Enums;
<#
	}
#>
using <#=companyNamespace#>.<#=moduleId#>.Resources.Forms;
using <#=companyNamespace#>.<#=webModuleNamespace#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=webModuleNamespace#>.Controllers
{
    /// <summary>
    /// <#=entityName#> Public Controller
    /// </summary>
    /// <typeparam name="T">Where T is type of <see cref="<#=modelName#>"/></typeparam>
    public class <#=entityName#>Controller<T> : MultitenantControllerBase<<#=entityName#>ViewModel<T>>
        where T : <#=modelName#>, new()
    {
        #region Public variables

        /// <summary>
        /// Gets or sets the internal controller
        /// </summary>
        public <#=entityName#>ControllerInternal<T> ControllerInternal { get; set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Constructor for <#=entityName#>
        /// </summary>
        /// <param name="container">Unity Container</param>
        public <#=entityName#>Controller(IUnityContainer container)
            : base(container,"<#=moduleId#><#=entityName#>")
        {
        }

        #endregion

        #region Initialize MultitenantControllerBase

        /// <summary>
        /// Override Initialize method
        /// </summary>
        /// <param name="requestContext">Request Context</param>
        protected override void Initialize(System.Web.Routing.RequestContext requestContext)
        {
            base.Initialize(requestContext);
            ControllerInternal = new <#=entityName#>ControllerInternal<T>(Context);
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Load screen
        /// </summary>
<#
	if (entityContext)
	{
#>
        /// <param name="type">Payroll type enum stored by the base class in Context.ScreenContext.EntityContext</param>
<#
	}
#>
        /// <param name="id">Id for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
<#
	if (entityContext)
	{
#>
        public virtual ActionResult Index(PayrollType type, string id)
<#
	}
    else
    {
#>
        public virtual ActionResult Index(string id)
<#
    }
#>
        {
<#
	foreach(var view in settings.Entities)
	{
	    if (view.Options[BusinessView.Constants.HasGrid] || view.ForGrid)
	    {
            var viewName = view.Properties[BusinessView.Constants.EntityName];
            WriteLine("ViewBag.{0}Grid = ControllerInternal.CustomGridDefinitionsUsingService(CommonUtil.EntityContextReplacement({1}.EntityName, Context.ScreenContext.EntityContext), GetGridJsonFilePath(\"{0}Grid\", requestUri));", viewName, modelName);
            WriteLine("// ViewBag.{0}Grid = ControllerInternal.CreateGridDefinitionAndPreference(GetGridJsonFilePath(\"{0}Grid\"));", viewName);
	    }
	}
#>
            return ViewWithCatch(() => ControllerInternal.GetById(id),
                CommonResx.GetFailedMessage, <#=resxName#>.<#=keyFieldName#>);
        }

        /// <summary>
        /// Get <#=modelName#>
        /// </summary>
        /// <param name="id">Id for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        [HttpPost]
        public virtual JsonNetResult Get(string id)
        {
            return CallWithCatch(() => ControllerInternal.GetById(id),
                CommonResx.GetFailedMessage, <#=resxName#>.<#=keyFieldName#>);
        }

        /// <summary>
        /// Add <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        [HttpPost]
        public virtual JsonNetResult Add(T model)
        {
            if (!ValidateModelState(ModelState, out ViewModelBase<ModelBase> viewModel))
            {
                return JsonNet(viewModel);
            }

            return CallWithCatch(() => ControllerInternal.Add(model),
                CommonResx.AddFailedMessage, <#=resxName#>.<#=keyFieldName#>);
        }

        /// <summary>
        /// Create <#=modelName#>
        /// </summary>
        /// <returns>JSON object for <#=modelName#></returns>
        [HttpPost]
        public virtual JsonNetResult Create()
        {
            return CallWithCatch(() => ControllerInternal.Create(),
                CommonResx.UnhandledExceptionMessage);
        }

        /// <summary>
        /// Update <#=modelName#>
        /// </summary>
        /// <param name="model">Model for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        [HttpPost]
        public virtual JsonNetResult Save(T model)
        {
            if (!ValidateModelState(ModelState, out ViewModelBase<ModelBase> viewModel))
            {
                return JsonNet(viewModel);
            }

            return CallWithCatch(() => ControllerInternal.Save(model),
                CommonResx.SaveFailedMessage);
        }

        /// <summary>
        /// Delete <#=modelName#>
        /// </summary>
        /// <param name="id">Id for <#=modelName#></param>
        /// <returns>JSON object for <#=modelName#></returns>
        [HttpPost]
        public virtual JsonNetResult Delete(string id)
        {
            return CallWithCatch(() => ControllerInternal.Delete(id),
                CommonResx.DeleteFailedMessage, <#=resxName#>.<#=keyFieldName#>);
        }

        /// <summary>
        /// Method that returns the list of records based on filter criterias
        /// </summary>
        /// <param name="pageNumber">An integer value that represents the page number</param>
        /// <param name="pageSize">An integer value that represents the page size</param>
        /// <param name="filters">A filter string</param>
        /// <returns>Returns a JsonNetResult object</returns>
        [HttpPost]
        public virtual JsonNetResult GetList(int pageNumber, int pageSize = 10, string filters = null)
        {
            return CallWithCatch(() => ControllerInternal.GetList(pageNumber, pageSize, filters),
                string.Empty);
        }

        #endregion
    }
}