<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2024 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.ControllerSettings" name="controllerSettings" #>
<#
    // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var extension = controllerSettings.BusinessView.Properties[BusinessView.Constants.Extension];
    var modelName = controllerSettings.BusinessView.Properties[BusinessView.Constants.ModelName];
    var resourceName = moduleId + controllerSettings.BusinessView.Properties[BusinessView.Constants.ResourceName];
	var RestrictedViewResourceControllerValue = controllerSettings.BusinessView.Properties[BusinessView.Constants.Verbs];
#>
// <#=copyright#>

using System.Web.OData.Builder;
using Unity;
using <#=companyNamespace#>.<#=moduleId#>.WebApi.Models;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.Attributes;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.BusinessRepository;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.Controllers;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.Interfaces;
using Microsoft.Web.Http;
using System.Web.OData.Routing;
using System.Linq;

namespace <#=companyNamespace#>.<#=moduleId#>.WebApi.Controllers<#=extension#>
{
    /// <summary>
    /// Class <#=resourceName#>Controller
    /// </summary>
    [ControllerName("<#=resourceName#>")]
    [ODataRoutePrefix("<#=resourceName#>")]
    <#=RestrictedViewResourceControllerValue#>

    public partial class <#=resourceName#>Controller : ViewResourceController<<#=modelName#>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=resourceName#>Controller"/> class.
        /// </summary>
        /// <param name="container">The container</param>
        public <#=resourceName#>Controller(IUnityContainer container) : base(container)
        {
        }

        /// <summary>
        /// Registers this resource as a Web API endpoint
        /// </summary>
        /// <param name="builder"></param>
<# 
var templateFirstLevelEntityList = string.Join(", ", BuildFirstLevelEntityList().Select(e => "T" + e));
var templateFirstLevelEntityListWithConstraints = string.Join("\r\n        ", BuildFirstLevelEntityList().Select(e => "where T" + e + " : class"));
#>

        public static void RegisterODataEntityBase<<#=templateFirstLevelEntityList#>>(ODataModelBuilder builder, string entityName)
        <#=templateFirstLevelEntityListWithConstraints#>
        {
            builder.EntitySet<T<#=modelName#>>(entityName);
<#
		foreach (var detail in controllerSettings.Details)
		{
			WriteLine("            builder.ComplexType<T{0}>();", detail.BusinessView.Properties[BusinessView.Constants.ModelName]);
		}
#>
        }



        /// <summary>
        /// Base method for registering this resource as a Web API endpoint 
        /// </summary>
<#
        WriteLine("        /// <typeparam name=\"{0}\"></typeparam>", modelName);
        foreach (var detail in controllerSettings.Details)
        {
            WriteLine("        /// <typeparam name=\"{0}\"></typeparam>", detail.BusinessView.Properties[BusinessView.Constants.ModelName]);
        }
#>
        /// <param name="builder">ODataModelBuilder</param>
        /// <param name="entityName">Entity Name</param>
        /// <param name="builder"></param>
        public static void RegisterODataEntity(ODataModelBuilder builder)
        {
<#
              WriteLine("            RegisterODataEntityBase<{0}>(builder, \"{1}\");", string.Join(",", BuildFirstLevelEntityList()), resourceName);
#>
        }

<#
	var entityList = new List<string>();
	BuildAllEntities(entityList, controllerSettings);
	var templateEntityList = string.Join(", ", entityList.Select(e => "T" + e));
	var templateEntityList2 = string.Join(", ", entityList);
	var templateEntityListWithConstraints = string.Join("\r\n        ", entityList.Select(e => "where T" + e + " :" + e + ", new()"));
#>


        /// <summary>
        /// Specifies the Sage views and their relationships that backs this resource
        /// </summary>
        /// <returns>An instance of IViewEntity which contains the Sage views and corresponding relationships</returns>
        public IViewResourceEntity GetViewEntityHierarchyBase<<#=templateEntityList#>>()
        <#=templateEntityListWithConstraints#>
        {
<#
    DefineEntities(controllerSettings, "");
    DefineRelationships(controllerSettings, "");
#>
            return <#=modelName#>Entity;
        }

        /// <summary>
        /// Specifies the Sage views and their relationships that backs this resource
        /// </summary>
        /// <returns>An instance of IViewEntity which contains the Sage views and corresponding relationships</returns>
        protected override IViewResourceEntity GetViewEntityHierarchy()
        {
            return GetViewEntityHierarchyBase<<#=templateEntityList2#>>();
        }
    }
}
<#+
    public void DefineEntities(ControllerSettings current, string Prefix)
    {
        var keyType = (current.KeyProperties.Count == 0) ? "" : current.KeyType == ViewKeyType.Sequenced ? "ViewKeyType.Sequenced" : "ViewKeyType.Ordered";
        var keySegments = "";
        foreach (var keyProperty in current.KeyProperties)
        {
            keySegments += string.Format(@", (m => m.{0})", keyProperty);
        }
		var viewModelName = current.BusinessView.Properties[BusinessView.Constants.ModelName];
#>
            var <#=Prefix#><#=viewModelName#>Entity = ViewResourceEntity<T<#=viewModelName#>>.Create(<#=keyType#><#=keySegments#>);
<#+
        foreach (var detailSettings in current.Details)
        {
            DefineEntities(detailSettings, Prefix + viewModelName + "_");
        }
    }
#>
<#+
    public void DefineRelationships(ControllerSettings current, string Prefix)
    {
        foreach (var detailSettings in current.Details)
        {
			var headerViewModelName = current.BusinessView.Properties[BusinessView.Constants.ModelName];
			var detailsViewModelName = detailSettings.BusinessView.Properties[BusinessView.Constants.ModelName];
			var detailsViewPropertyName = detailSettings.BusinessView.Properties[BusinessView.Constants.PropertyName];

#>
            <#=Prefix#><#=headerViewModelName#>Entity.AddDetail(<#=Prefix#><#=headerViewModelName#>_<#=detailsViewModelName#>Entity, (m => m.<#=detailsViewPropertyName#>));
<#+
            DefineRelationships(detailSettings, Prefix + headerViewModelName + "_");
        }
    }
#>

<#+ private List<string> BuildFirstLevelEntityList()
{
	var entityList = new List<string>();
	entityList.Add(controllerSettings.BusinessView.Properties[BusinessView.Constants.ModelName]);
	foreach (var detail in controllerSettings.Details)
	{
		entityList.Add(detail.BusinessView.Properties[BusinessView.Constants.ModelName]);
	}
	return entityList;
} 
#>

<#+ private void BuildAllEntities(List<string> entities, ControllerSettings controllerSettings)
{
	entities.Add(controllerSettings.BusinessView.Properties[BusinessView.Constants.ModelName]);
	foreach (var detail in controllerSettings.Details)
	{
		BuildAllEntities(entities, detail);
	}
}
#>

